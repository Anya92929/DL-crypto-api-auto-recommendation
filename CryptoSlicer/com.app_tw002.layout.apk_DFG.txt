Write DFG for APK /home/ya/myGithub/CryptoSlicer/testApp/BUSINESS/com.app_tw002.layout.apk
======================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: java.lang.String getMacArray()> for Value: null}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: java.lang.String getMacArray()> for Value: $r8}
DataFlow{$r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>()----$r7---->$r8 = (java.lang.String) $r7}
DataFlow{$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")----$r9---->$r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r2 = new java.util.TreeSet----$r2---->specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Collection)>($r5)}
DataFlow{specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("{")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}")}
DataFlow{$r4 = specialinvoke $r0.<com.devicecollector.collectors.LocalCollector: java.util.HashMap getProxyPeircingInfo()>()----$r4---->virtualinvoke $r3.<java.util.HashMap: void putAll(java.util.Map)>($r4)}
DataFlow{specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()----$r9---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{virtualinvoke $r3.<java.util.HashMap: void putAll(java.util.Map)>($r4)----$r3---->$r5 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>()}
DataFlow{$r0 := @this: com.devicecollector.collectors.LocalCollector----$r0---->$r3 = specialinvoke $r0.<com.devicecollector.collectors.LocalCollector: java.util.HashMap getWifiMacInfo()>()}
DataFlow{specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("{")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}")}
DataFlow{$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)----$r9---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")}
DataFlow{$r5 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>()----$r5---->specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Collection)>($r5)}
DataFlow{$r9 = new java.lang.StringBuilder----$r9---->specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")----$r9---->$r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()----$r8---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{$r8 = (java.lang.String) $r7----$r8---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{$r8 = (java.lang.String) $r7----$r8---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Collection)>($r5)----$r2---->$r6 = interfaceinvoke $r2.<java.util.SortedSet: java.util.Iterator iterator()>()}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{$r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()----$r8---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{$r3 = specialinvoke $r0.<com.devicecollector.collectors.LocalCollector: java.util.HashMap getWifiMacInfo()>()----$r3---->virtualinvoke $r3.<java.util.HashMap: void putAll(java.util.Map)>($r4)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}")}
DataFlow{$r1 = new java.lang.StringBuilder----$r1---->specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("{")}
DataFlow{$r6 = interfaceinvoke $r2.<java.util.SortedSet: java.util.Iterator iterator()>()----$r6---->$r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>()}
DataFlow{specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()----$r9---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)}
DataFlow{$r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>()----$r7---->$r8 = (java.lang.String) $r7}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}")----$r1---->$r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()----$r8---->return $r8}
DataFlow{$r9 = new java.lang.StringBuilder----$r9---->specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)----$r9---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppEventsLogger: void deactivateApp(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: void deactivateApp(android.content.Context,java.lang.String)>, lineNumber=299, columnNumber=-1}}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->specialinvoke $r2.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, null)}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->specialinvoke $r2.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: java.lang.String hashKeyForDisk(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, lineNumber=251, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r1 = staticinvoke <com.biznessapps.utils.google.caching.ImageCache: java.lang.String hashKeyForDisk(java.lang.String)>($r1)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>, lineNumber=386, columnNumber=-1}}
Slice{Method:<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>, lineNumber=41, columnNumber=-1}}
Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker: android.graphics.Bitmap getImageFromCache(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageWorker: android.graphics.Bitmap getImageFromCache(java.lang.String)>, lineNumber=281, columnNumber=-1}}
Slice{Method:<com.biznessapps.food_ordering.locations.LocationDetailActivity: void loadBgUrl()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.food_ordering.locations.LocationDetailActivity: void loadBgUrl()>, lineNumber=131, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.FileLruCache: void renameToTargetAndTrim(java.lang.String,java.io.File)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, caller=<com.facebook.internal.FileLruCache: void renameToTargetAndTrim(java.lang.String,java.io.File)>, lineNumber=240, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r1 = staticinvoke <com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>($r1)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.FileLruCache: void access$100(com.facebook.internal.FileLruCache,java.lang.String,java.io.File)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: void renameToTargetAndTrim(java.lang.String,java.io.File)>, caller=<com.facebook.internal.FileLruCache: void access$100(com.facebook.internal.FileLruCache,java.lang.String,java.io.File)>, lineNumber=59, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: byte[] digest()>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>, lineNumber=1278, columnNumber=-1}}
DataFlow{$r2 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: java.security.MessageDigest md5>----$r2---->$r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()}
DataFlow{$r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r0---->$r2 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: java.security.MessageDigest md5>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, caller=<com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>, lineNumber=133, columnNumber=-1}}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->$r5 = staticinvoke <com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>($r0, $r1)}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->$r5 = staticinvoke <com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>($r0, $r1)}
----------CallerLinks----------------
Slice{Method:<com.facebook.AppLinkData: void access$000(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>, caller=<com.facebook.AppLinkData: void access$000(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>, lineNumber=39, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent createProxyAuthIntent(android.content.Context,java.lang.String,java.util.List,java.lang.String,boolean,com.facebook.SessionDefaultAudience)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent validateActivityIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent createProxyAuthIntent(android.content.Context,java.lang.String,java.util.List,java.lang.String,boolean,com.facebook.SessionDefaultAudience)>, lineNumber=-1, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>, lineNumber=447, columnNumber=-1}}
DataFlow{r8 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----r8---->$r4 = r8}
DataFlow{$r4 = r8----$r4---->$r5 = virtualinvoke $r4.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>, lineNumber=443, columnNumber=-1}}
DataFlow{r8 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----r8---->specialinvoke r8.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r5)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>, lineNumber=443, columnNumber=-1}}
DataFlow{$r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmHash(java.lang.String)>($r2)----$r5---->specialinvoke r8.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r5)}
DataFlow{r8 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----r8---->specialinvoke r8.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r5)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)> for Value: $r5}
DataFlow{$r4 = r8----$r4---->$r5 = virtualinvoke $r4.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>()}
DataFlow{$r5 = virtualinvoke $r4.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>()----$r5---->return $r5}
DataFlow{r8 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----r8---->$r4 = r8}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>, caller=<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>, lineNumber=81, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, caller=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, lineNumber=606, columnNumber=-1}}
DataFlow{$r2 = staticinvoke <com.facebook.internal.Utility: java.lang.String getMetadataApplicationId(android.content.Context)>($r1)----$r2---->$r2 = staticinvoke <com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>($r1, $r2)}
DataFlow{$r1 := @parameter0: android.content.Context----$r1---->staticinvoke <com.facebook.internal.Validate: void notNull(java.lang.Object,java.lang.String)>($r1, "context")}
DataFlow{staticinvoke <com.facebook.internal.Validate: void notNull(java.lang.Object,java.lang.String)>($r1, "context")----$r1---->$r2 = staticinvoke <com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>($r1, $r2)}
DataFlow{$r2 := @parameter1: java.lang.String----$r2---->$r2 = staticinvoke <com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>($r1, $r2)}
----------CallerLinks----------------
Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String)>, lineNumber=372, columnNumber=-1}}
Slice{Method:<com.facebook.AppEventsLogger: void activateApp(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: void activateApp(android.content.Context,java.lang.String)>, lineNumber=261, columnNumber=-1}}
Slice{Method:<com.facebook.AppEventsLogger: void deactivateApp(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: void deactivateApp(android.content.Context,java.lang.String)>, lineNumber=299, columnNumber=-1}}
Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,com.facebook.Session)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,com.facebook.Session)>, lineNumber=341, columnNumber=-1}}
Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String,com.facebook.Session)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String,com.facebook.Session)>, lineNumber=357, columnNumber=-1}}
Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context)>, lineNumber=327, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>, caller=<com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>, lineNumber=22, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.PlatformServiceClient: boolean start()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)>, caller=<com.facebook.internal.PlatformServiceClient: boolean start()>, lineNumber=78, columnNumber=-1}}
DataFlow{$r0 := @this: com.facebook.internal.PlatformServiceClient----$r0---->$r1 = $r0.<com.facebook.internal.PlatformServiceClient: android.content.Context context>}
DataFlow{$r1 = $r0.<com.facebook.internal.PlatformServiceClient: android.content.Context context>----$r1---->$r2 = staticinvoke <com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context)>, lineNumber=327, columnNumber=-1}}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->specialinvoke $r1.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, null, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppLinkData: void access$000(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>, caller=<com.facebook.AppLinkData: void access$000(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>, lineNumber=39, columnNumber=-1}}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->staticinvoke <com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>($r0, $r1, $r2)}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->staticinvoke <com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>($r0, $r1, $r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String getMetadataApplicationId(android.content.Context)> for Value: $r1}
DataFlow{$r1 = staticinvoke <com.facebook.Settings: java.lang.String getApplicationId()>()----$r1---->return $r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.auth.OAuthToken: java.lang.String getTokenSecret()> for Value: r1}
DataFlow{$r0 := @this: twitter4j.auth.OAuthToken----$r0---->r1 = $r0.<twitter4j.auth.OAuthToken: java.lang.String tokenSecret>}
DataFlow{r1 = $r0.<twitter4j.auth.OAuthToken: java.lang.String tokenSecret>----r1---->return r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>, caller=<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>, lineNumber=239, columnNumber=-1}}
DataFlow{$r6 = $r3[$i1]----$r6---->$r10 = virtualinvoke $r6.<android.content.pm.Signature: byte[] toByteArray()>()}
DataFlow{$r9 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r2, 64)----$r9---->$r3 = $r9.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>}
DataFlow{$r2 := @parameter1: java.lang.String----$r2---->$r9 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r2, 64)}
DataFlow{$r1 := @parameter0: android.content.Context----$r1---->$r8 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>()}
DataFlow{$i1 = $i1 + 1----$i1---->$r6 = $r3[$i1]}
DataFlow{$i1 = 0----$i1---->$i1 = $i1 + 1}
DataFlow{$r10 = virtualinvoke $r6.<android.content.pm.Signature: byte[] toByteArray()>()----$r10---->$r2 = staticinvoke <com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>($r10)}
DataFlow{$i1 = $i1 + 1----$i1---->$i1 = $i1 + 1}
DataFlow{$r3 = $r9.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>----$r3---->$r6 = $r3[$i1]}
DataFlow{$r8 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>()----$r8---->$r9 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r2, 64)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent validateActivityIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent validateActivityIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, lineNumber=315, columnNumber=-1}}
Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, lineNumber=332, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>, lineNumber=470, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>, caller=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)>, lineNumber=101, columnNumber=-1}}
DataFlow{$r2 := @parameter0: java.lang.String----$r2---->$r3 = staticinvoke <com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>($r2)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, lineNumber=-1, columnNumber=-1}}
Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, lineNumber=35, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.UrlRedirectCache: com.facebook.internal.FileLruCache getCache(android.content.Context)> for Value: $r3}
DataFlow{$r3 = new com.facebook.internal.FileLruCache----$r3----><com.facebook.internal.UrlRedirectCache: com.facebook.internal.FileLruCache urlRedirectCache> = $r3}
DataFlow{$r3 = <com.facebook.internal.UrlRedirectCache: com.facebook.internal.FileLruCache urlRedirectCache>----$r3---->return $r3}
DataFlow{<com.facebook.internal.UrlRedirectCache: com.facebook.internal.FileLruCache urlRedirectCache> = $r3----<com.facebook.internal.UrlRedirectCache: com.facebook.internal.FileLruCache urlRedirectCache>---->$r3 = <com.facebook.internal.UrlRedirectCache: com.facebook.internal.FileLruCache urlRedirectCache>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)> for CallSite: MethodCallSiteInfo{callee=<java.security.Principal: java.lang.String getName()>, caller=<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>, lineNumber=160, columnNumber=-1}}
DataFlow{$r5 = interfaceinvoke $r0.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>()----$r5---->$r6 = interfaceinvoke $r5.<java.security.Principal: java.lang.String getName()>()}
DataFlow{$r0 := @parameter0: org.apache.http.auth.Credentials----$r0---->$r5 = interfaceinvoke $r0.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>()}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>, caller=<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=136, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.Session$TokenRefreshRequest: void bind()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)>, caller=<com.facebook.Session$TokenRefreshRequest: void bind()>, lineNumber=1656, columnNumber=-1}}
DataFlow{$r1 = staticinvoke <com.facebook.Session: android.content.Context getStaticContext()>()----$r1---->$r2 = staticinvoke <com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.CacheableRequestBatch: java.lang.String getCacheKeyOverride()> for Value: r1}
DataFlow{r1 = $r0.<com.facebook.internal.CacheableRequestBatch: java.lang.String cacheKey>----r1---->return r1}
DataFlow{$r0 := @this: com.facebook.internal.CacheableRequestBatch----$r0---->r1 = $r0.<com.facebook.internal.CacheableRequestBatch: java.lang.String cacheKey>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.ImageResponseCache: java.io.InputStream getCachedImageStream(java.net.URI,android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>, caller=<com.facebook.internal.ImageResponseCache: java.io.InputStream getCachedImageStream(java.net.URI,android.content.Context)>, lineNumber=51, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.net.URI----$r0---->$r3 = virtualinvoke $r0.<java.net.URI: java.lang.String toString()>()}
DataFlow{$r3 = virtualinvoke $r0.<java.net.URI: java.lang.String toString()>()----$r3---->$r5 = virtualinvoke $r4.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>($r3)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, lineNumber=332, columnNumber=-1}}
DataFlow{$r2 := @parameter1: android.content.Intent----$r2---->$r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>($r2, 0)}
DataFlow{$r6 = $r5.<android.content.pm.ServiceInfo: java.lang.String packageName>----$r6---->$z0 = virtualinvoke $r1.<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>($r0, $r6)}
DataFlow{$r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>----$r5---->$r6 = $r5.<android.content.pm.ServiceInfo: java.lang.String packageName>}
DataFlow{$r3 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>()----$r3---->$r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>($r2, 0)}
DataFlow{$r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>($r2, 0)----$r4---->$r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->$z0 = virtualinvoke $r1.<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>($r0, $r6)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)>, lineNumber=469, columnNumber=-1}}
Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)>, lineNumber=381, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>, caller=<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean)>, lineNumber=453, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.RequestBatch: com.facebook.Request get(int)> for Value: $r3}
DataFlow{$r2 = $r0.<com.facebook.RequestBatch: java.util.List requests>----$r2---->$r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0)}
DataFlow{$r3 = (com.facebook.Request) $r1----$r3---->return $r3}
DataFlow{$i0 := @parameter0: int----$i0---->$r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0)}
DataFlow{$r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0)----$r1---->$r3 = (com.facebook.Request) $r1}
DataFlow{$r0 := @this: com.facebook.RequestBatch----$r0---->$r2 = $r0.<com.facebook.RequestBatch: java.util.List requests>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)>, lineNumber=469, columnNumber=-1}}
DataFlow{$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT")----$r5---->$r5 = staticinvoke <com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>($r0, $r5, $r4)}
DataFlow{$r5 = new android.content.Intent----$r5---->specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("com.facebook.platform.PLATFORM_SERVICE")}
DataFlow{$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r6)----$r5---->$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT")}
DataFlow{$r6 = virtualinvoke $r4.<com.facebook.internal.NativeProtocol$NativeAppInfo: java.lang.String getPackage()>()----$r6---->$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r6)}
DataFlow{specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("com.facebook.platform.PLATFORM_SERVICE")----$r5---->$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r6)}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->$r5 = staticinvoke <com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>($r0, $r5, $r4)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.PlatformServiceClient: boolean start()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent createPlatformServiceIntent(android.content.Context)>, caller=<com.facebook.internal.PlatformServiceClient: boolean start()>, lineNumber=78, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: void collectDeviceId()> for CallSite: MethodCallSiteInfo{callee=<com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>, caller=<com.devicecollector.collectors.LocalCollector: void collectDeviceId()>, lineNumber=168, columnNumber=-1}}
DataFlow{$r10 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>()----$r10---->$r7 = virtualinvoke $r10.<java.util.UUID: java.lang.String toString()>()}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
DataFlow{$r7 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()----$r7---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
DataFlow{$r8 = <com.devicecollector.collectors.LocalCollector$DeviceIDType: com.devicecollector.collectors.LocalCollector$DeviceIDType UID>----$r8---->$r7 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()}
DataFlow{$r7 = virtualinvoke $r10.<java.util.UUID: java.lang.String toString()>()----$r7---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)----$r6---->$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()----$r7---->$r7 = staticinvoke <com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>($r7)}
DataFlow{$r6 = new java.lang.StringBuilder----$r6---->specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()}
DataFlow{specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: void collectDeviceId()> for CallSite: MethodCallSiteInfo{callee=<com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>, caller=<com.devicecollector.collectors.LocalCollector: void collectDeviceId()>, lineNumber=140, columnNumber=-1}}
DataFlow{$r5 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()----$r5---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
DataFlow{$r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()----$r5---->$r5 = staticinvoke <com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>($r5)}
DataFlow{specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)----$r6---->$r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r6 = new java.lang.StringBuilder----$r6---->specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r5 = <android.os.Build: java.lang.String SERIAL>----$r5---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
DataFlow{$r8 = <com.devicecollector.collectors.LocalCollector$DeviceIDType: com.devicecollector.collectors.LocalCollector$DeviceIDType ANDROID_SERIAL>----$r8---->$r5 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: void collectDeviceId()> for CallSite: MethodCallSiteInfo{callee=<com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>, caller=<com.devicecollector.collectors.LocalCollector: void collectDeviceId()>, lineNumber=148, columnNumber=-1}}
DataFlow{$r6 = new java.lang.StringBuilder----$r6---->specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
DataFlow{$r8 = <com.devicecollector.collectors.LocalCollector$DeviceIDType: com.devicecollector.collectors.LocalCollector$DeviceIDType MAC_HASH>----$r8---->$r9 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()}
DataFlow{$r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()----$r5---->$r5 = staticinvoke <com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>($r5)}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)----$r6---->$r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)}
DataFlow{$r5 = virtualinvoke $r0.<com.devicecollector.collectors.LocalCollector: java.lang.String getMacArray()>()----$r5---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
DataFlow{$r9 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()----$r9---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)}
DataFlow{$r0 := @this: com.devicecollector.collectors.LocalCollector----$r0---->$r5 = virtualinvoke $r0.<com.devicecollector.collectors.LocalCollector: java.lang.String getMacArray()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: void collectDeviceId()> for CallSite: MethodCallSiteInfo{callee=<com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>, caller=<com.devicecollector.collectors.LocalCollector: void collectDeviceId()>, lineNumber=133, columnNumber=-1}}
DataFlow{$r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()----$r5---->$r5 = staticinvoke <com.devicecollector.util.HashUtils: java.lang.String convertToSha256Hash(java.lang.String)>($r5)}
DataFlow{specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)}
DataFlow{$r8 = <com.devicecollector.collectors.LocalCollector$DeviceIDType: com.devicecollector.collectors.LocalCollector$DeviceIDType ANDROID_ID>----$r8---->$r9 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)----$r6---->$r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r0 := @this: com.devicecollector.collectors.LocalCollector----$r0---->$r3 = $r0.<com.devicecollector.collectors.LocalCollector: android.content.Context context>}
DataFlow{$r5 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r4, "android_id")----$r5---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
DataFlow{$r9 = virtualinvoke $r8.<com.devicecollector.collectors.LocalCollector$DeviceIDType: java.lang.String name()>()----$r9---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)}
DataFlow{$r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>()----$r4---->$r5 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r4, "android_id")}
DataFlow{$r3 = $r0.<com.devicecollector.collectors.LocalCollector: android.content.Context context>----$r3---->$r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>()}
DataFlow{$r6 = new java.lang.StringBuilder----$r6---->specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)}
----------CallerLinks----------------
Slice{Method:<com.devicecollector.CollectorProcess: java.lang.Void doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.devicecollector.collectors.LocalCollector: void collectDeviceId()>, caller=<com.devicecollector.CollectorProcess: java.lang.Void doInBackground(java.lang.String[])>, lineNumber=122, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>, lineNumber=169, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r0)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>, caller=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, lineNumber=163, columnNumber=-1}}
Slice{Method:<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>, caller=<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>, lineNumber=159, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$600()> for Value: $r0}
DataFlow{$r0 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeRandomChallenge()>()----$r0---->return $r0}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] createBlob(byte[],byte[])> for Value: $r2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)----$r2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)}
DataFlow{$i1 = $i1 + $i2----$i1---->$i1 = $i1 + $i2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)----0---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)----$r6---->$i2 = lengthof $r6}
DataFlow{$i2 = lengthof $r6----$i2---->$i1 = $i1 + $i2}
DataFlow{$r1 := @parameter1: byte[]----$r1---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i2)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)----$i1---->$i1 = $i1 + $i2}
DataFlow{$r6 = newarray (byte)[4]----$r6---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)}
DataFlow{$i1 = $i1 + $i2----$i1---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)}
DataFlow{$i2 = lengthof $r6----$i2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)}
DataFlow{$r4 = newarray (byte)[4]----$r4---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)}
DataFlow{$i1 = $i1 + $i2----$i1---->$i1 = $i1 + $i2}
DataFlow{$i1 = $i1 + 8----$i1---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)}
DataFlow{$i1 = $i1 + $i2----$i1---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)----0---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i2)}
DataFlow{$i2 = lengthof $r4----$i2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)}
DataFlow{$r3 = newarray (byte)[4]----$r3---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)----$i1---->$i1 = $i1 + $i2}
DataFlow{$i1 = $i1 + $i2----$i1---->$r2 = newarray (byte)[$i1]}
DataFlow{$i2 = lengthof $r4----$i2---->$i1 = $i1 + $i2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)----0---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)}
DataFlow{$i1 = $i1 + $i2----$i1---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i2)}
DataFlow{$i2 = lengthof $r4----$i2---->$i1 = $i1 + $i2}
DataFlow{$i2 = lengthof $r5----$i2---->$i1 = $i1 + $i2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)----$r2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i2)----$r2---->return $r2}
DataFlow{$r2 = newarray (byte)[$i1]----$r2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)----$r4---->$i2 = lengthof $r4}
DataFlow{$i1 = lengthof $r3----$i1---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1)}
DataFlow{$i2 = lengthof $r1----$i2---->$i1 = $i1 + $i2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1)----$r3---->$i1 = lengthof $r3}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)----8---->$i1 = $i1 + 8}
DataFlow{$i1 = lengthof $r3----$i1---->$i1 = $i1 + $i2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)----$i1---->$i1 = $i1 + $i2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)----$i1---->$i1 = $i1 + 8}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)----0---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)}
DataFlow{$i2 = lengthof $r5----$i2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)}
DataFlow{$i2 = lengthof $r5----$i2---->$i1 = $i1 + $i2}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1)----0---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)}
DataFlow{$i1 = $i1 + $i2----$i1---->$i1 = $i1 + 8}
DataFlow{$i2 = lengthof $r6----$i2---->$i1 = $i1 + $i2}
DataFlow{$r5 = newarray (byte)[8]----$r5---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r2, $i1, $i2)----$r2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i2)}
DataFlow{$i1 = lengthof $r3----$i1---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i1)----$r2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)}
DataFlow{$r0 := @parameter0: byte[]----$r0---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, $i1, 8)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i1, $i2)----$r2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)}
DataFlow{staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i1, $i2)----$r5---->$i2 = lengthof $r5}
DataFlow{$i2 = lengthof $r1----$i2---->staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i2)}
DataFlow{$i1 = $i1 + 8----$i1---->$i1 = $i1 + $i2}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker: java.lang.String getCacheKey(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)> for Value: $r0}
DataFlow{$r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0)----$r2---->$r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)}
DataFlow{specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()----$r2---->$r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0)}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0)}
DataFlow{$i0 = virtualinvoke $r1.<com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams: int getImageType()>()----$i0---->$r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)}
DataFlow{$r2 = new java.lang.StringBuilder----$r2---->specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)----$r2---->$r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r1 := @parameter1: com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams----$r1---->$i0 = virtualinvoke $r1.<com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams: int getImageType()>()}
DataFlow{$r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()----$r0---->return $r0}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()> for Value: r1}
DataFlow{r1 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] challenge>----r1---->return r1}
DataFlow{$r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$Type2Message----$r0---->r1 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] challenge>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.FoodOrderingManager getInstance()> for Value: $r0}
DataFlow{$r0 = new com.biznessapps.food_ordering.FoodOrderingManager----$r0----><com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.FoodOrderingManager instance> = $r0}
DataFlow{<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.FoodOrderingManager instance> = $r0----<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.FoodOrderingManager instance>---->$r0 = <com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.FoodOrderingManager instance>}
DataFlow{$r0 = <com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.FoodOrderingManager instance>----$r0---->return $r0}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.util.List toParamList(twitter4j.internal.http.HttpParameter[])> for Value: $r1}
DataFlow{$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0)----$r2---->interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r2)}
DataFlow{$i0 = lengthof $r0----$i0---->specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0)}
DataFlow{specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0)----$r1---->interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r2)}
DataFlow{$r1 = new java.util.ArrayList----$r1---->specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0)}
DataFlow{interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r2)----$r1---->return $r1}
DataFlow{$r0 := @parameter0: twitter4j.internal.http.HttpParameter[]----$r0---->$r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=154, columnNumber=-1}}
DataFlow{$r7 := @parameter7: byte[]----$r7---->specialinvoke $r8.<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r4, $r3, $r1, $r2, $r5, $i0, $r6, $r7)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=110, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=1308, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=154, columnNumber=-1}}
DataFlow{$r5 := @parameter4: byte[]----$r5---->specialinvoke $r8.<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r4, $r3, $r1, $r2, $r5, $i0, $r6, $r7)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=1308, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=110, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.braintreepayments.api.VenmoAppSwitch: java.lang.String getPackage()> for Value: "com.venmo"}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.Braintree: boolean isVenmoEnabled()> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.BraintreeApi: boolean isVenmoEnabled()>, caller=<com.braintreepayments.api.Braintree: boolean isVenmoEnabled()>, lineNumber=321, columnNumber=-1}}
DataFlow{$r0 := @this: com.braintreepayments.api.Braintree----$r0---->$r1 = $r0.<com.braintreepayments.api.Braintree: com.braintreepayments.api.BraintreeApi mBraintreeApi>}
DataFlow{$r1 = $r0.<com.braintreepayments.api.Braintree: com.braintreepayments.api.BraintreeApi mBraintreeApi>----$r1---->$z0 = virtualinvoke $r1.<com.braintreepayments.api.BraintreeApi: boolean isVenmoEnabled()>()}
----------CallerLinks----------------
Slice{Method:<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.Braintree: boolean isVenmoEnabled()>, caller=<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)>, lineNumber=98, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.Settings$2: void run()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>, caller=<com.facebook.Settings$2: void run()>, lineNumber=300, columnNumber=-1}}
DataFlow{$r2 = $r0.<com.facebook.Settings$2: java.lang.String val$applicationId>----$r2---->$r4 = staticinvoke <com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>($r3, $r2, 0)}
DataFlow{$r0 := @this: com.facebook.Settings$2----$r0---->$r2 = $r0.<com.facebook.Settings$2: java.lang.String val$applicationId>}
DataFlow{$r3 = $r0.<com.facebook.Settings$2: android.content.Context val$applicationContext>----$r3---->$r4 = staticinvoke <com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>($r3, $r2, 0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, lineNumber=300, columnNumber=-1}}
DataFlow{$r3 := @parameter3: byte[]----$r3---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r6, $r3, $r4)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=920, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, lineNumber=300, columnNumber=-1}}
DataFlow{$r5 := @parameter5: byte[]----$r5---->$r4 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] createBlob(byte[],byte[])>($r4, $r5)}
DataFlow{$r4 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] createBlob(byte[],byte[])>($r4, $r5)----$r4---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r6, $r3, $r4)}
DataFlow{$r4 := @parameter4: byte[]----$r4---->$r4 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] createBlob(byte[],byte[])>($r4, $r5)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=920, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, lineNumber=300, columnNumber=-1}}
DataFlow{$r6 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2)----$r6---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r6, $r3, $r4)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)> for Value: $r1}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{$r6 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r6)----$r6---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->$r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{$r6 = virtualinvoke $r5.<twitter4j.internal.http.HttpParameter: java.lang.String getValue()>()----$r6---->$r6 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r6)}
DataFlow{$r6 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r6)----$r6---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{$r5 = (twitter4j.internal.http.HttpParameter) $r4----$r5---->$r6 = virtualinvoke $r5.<twitter4j.internal.http.HttpParameter: java.lang.String getValue()>()}
DataFlow{$r2 = new java.lang.StringBuilder----$r2---->specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{$r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>()----$r3---->$r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>()}
DataFlow{$r5 = (twitter4j.internal.http.HttpParameter) $r4----$r5---->$r6 = virtualinvoke $r5.<twitter4j.internal.http.HttpParameter: java.lang.String getValue()>()}
DataFlow{$r0 := @parameter0: java.util.List----$r0---->$r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>()}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")----$r2---->$r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r6 = virtualinvoke $r5.<twitter4j.internal.http.HttpParameter: java.lang.String getValue()>()----$r6---->$r6 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r6)}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()----$r2---->$r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"")----$r2---->virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)}
DataFlow{$r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>()----$r4---->$r5 = (twitter4j.internal.http.HttpParameter) $r4}
DataFlow{virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)----$r2---->$r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()----$r1---->return $r1}
DataFlow{$r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>()----$r4---->$r5 = (twitter4j.internal.http.HttpParameter) $r4}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<javax.crypto.Mac: void init(java.security.Key)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, lineNumber=-1, columnNumber=-1}}
DataFlow{$r7 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r7)----$r7---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
DataFlow{specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
DataFlow{$r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>()----$r9---->specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r9, "HmacSHA1")}
DataFlow{$r7 = $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String consumerSecret>----$r7---->$r7 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r7)}
DataFlow{$r7 = virtualinvoke $r2.<twitter4j.auth.OAuthToken: java.lang.String getTokenSecret()>()----$r7---->$r7 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r7)}
DataFlow{$r2 := @parameter1: twitter4j.auth.OAuthToken----$r2---->$r7 = virtualinvoke $r2.<twitter4j.auth.OAuthToken: java.lang.String getTokenSecret()>()}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)----$r6---->$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA1")----$r5---->goto [?= virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r8)]}
DataFlow{$r6 = new java.lang.StringBuilder----$r6---->specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()}
DataFlow{specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r9, "HmacSHA1")----$r8---->goto [?= virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r8)]}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
DataFlow{$r8 = new javax.crypto.spec.SecretKeySpec----$r8---->specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r9, "HmacSHA1")}
DataFlow{$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()----$r7---->$r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>()}
DataFlow{$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)----$r6---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r7 = $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String consumerSecret>}
DataFlow{$r7 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r7)----$r7---->$r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String)>, lineNumber=306, columnNumber=-1}}
DataFlow{specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2)----$r4---->interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3)}
DataFlow{interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3)----$r4---->$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String normalizeRequestParameters(java.util.List)>($r4)}
DataFlow{interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)----$r3---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r6 = new twitter4j.internal.http.HttpParameter----$r6---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String normalizeRequestParameters(java.util.List)>($r4)----$r1---->$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)}
DataFlow{$i2 = interfaceinvoke $r3.<java.util.List: int size()>()----$i2---->specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2)}
DataFlow{interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)----$r3---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r6 = new twitter4j.internal.http.HttpParameter----$r6---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r9---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")}
DataFlow{specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1)----$r9---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")}
DataFlow{$r9 = new java.lang.StringBuilder----$r9---->specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1)}
DataFlow{$r8 = $r0.<twitter4j.auth.OAuthAuthorization: twitter4j.auth.OAuthToken oauthToken>----$r8---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r8)}
DataFlow{$r6 = new twitter4j.internal.http.HttpParameter----$r6---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(5)----$r3---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r6 = new twitter4j.internal.http.HttpParameter----$r6---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r6 = new twitter4j.internal.http.HttpParameter----$r6---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)----$r3---->interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3)}
DataFlow{$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")----$r9---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)----$r3---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)----$r3---->interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3)}
DataFlow{$r6 = <twitter4j.auth.OAuthAuthorization: twitter4j.internal.http.HttpParameter OAUTH_SIGNATURE_METHOD>----$r6---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1)}
DataFlow{$r4 = new java.util.ArrayList----$r4---->specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2)}
DataFlow{$r2 := @parameter1: java.lang.String----$r2---->$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String constructRequestURL(java.lang.String)>($r2)}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r8)}
DataFlow{$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)----$r1---->virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)----$r1---->$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)----$r3---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")----$r9---->virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)----$r3---->interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6)}
DataFlow{virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r9---->$r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()----$r1---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r8)}
DataFlow{$r3 = new java.util.ArrayList----$r3---->specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(5)}
DataFlow{$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String constructRequestURL(java.lang.String)>($r2)----$r1---->$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String)>, lineNumber=306, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String)>, lineNumber=306, columnNumber=-1}}
DataFlow{$r8 = $r0.<twitter4j.auth.OAuthAuthorization: twitter4j.auth.OAuthToken oauthToken>----$r8---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r8)}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String normalizeRequestParameters(java.util.List)> for Value: $r1}
DataFlow{$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String encodeParameters(java.util.List)>($r0)----$r1---->return $r1}
DataFlow{staticinvoke <java.util.Collections: void sort(java.util.List)>($r0)----$r0---->$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String encodeParameters(java.util.List)>($r0)}
DataFlow{$r0 := @parameter0: java.util.List----$r0---->staticinvoke <java.util.Collections: void sort(java.util.List)>($r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.FanWallFragment: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>, caller=<com.biznessapps.fan_wall.FanWallFragment: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler)>, lineNumber=289, columnNumber=-1}}
DataFlow{$r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("comment986%sbizapps%s", $r14)----$r16---->$r16 = staticinvoke <com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>($r16)}
DataFlow{$r14 = newarray (java.lang.Object)[2]----$r14---->$r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("comment986%sbizapps%s", $r14)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.FanWallFragment: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>, caller=<com.biznessapps.fan_wall.FanWallFragment: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler)>, lineNumber=296, columnNumber=-1}}
DataFlow{$r14 = newarray (java.lang.Object)[1]----$r14---->$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("fan713%s", $r14)}
DataFlow{$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("fan713%s", $r14)----$r2---->$r2 = staticinvoke <com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>($r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, caller=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=130, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask----$r0---->$r1 = virtualinvoke $r0.<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>($r3)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Void doInBackground(java.lang.Void[])>, caller=<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=81, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.events.EventGoingTabUtils$2----$r0---->$r1 = virtualinvoke $r0.<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Void doInBackground(java.lang.Void[])>($r3)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>, lineNumber=155, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>, lineNumber=155, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>("SHA-1", $r0)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, lineNumber=459, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.Session$AutoPublishAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> for CallSite: MethodCallSiteInfo{callee=<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>, caller=<com.facebook.Session$AutoPublishAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>, lineNumber=1863, columnNumber=-1}}
DataFlow{$r4 = $r0.<com.facebook.Session$AutoPublishAsyncTask: android.content.Context mApplicationContext>----$r4---->staticinvoke <com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>($r4, $r3, 1)}
DataFlow{$r3 = $r0.<com.facebook.Session$AutoPublishAsyncTask: java.lang.String mApplicationId>----$r3---->staticinvoke <com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>($r4, $r3, 1)}
DataFlow{$r0 := @this: com.facebook.Session$AutoPublishAsyncTask----$r0---->$r3 = $r0.<com.facebook.Session$AutoPublishAsyncTask: java.lang.String mApplicationId>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.auth.UsernamePasswordCredentials: java.security.Principal getUserPrincipal()> for Value: r1}
DataFlow{r1 = $r0.<org.apache.http.auth.UsernamePasswordCredentials: org.apache.http.auth.BasicUserPrincipal principal>----r1---->return r1}
DataFlow{$r0 := @this: org.apache.http.auth.UsernamePasswordCredentials----$r0---->r1 = $r0.<org.apache.http.auth.UsernamePasswordCredentials: org.apache.http.auth.BasicUserPrincipal principal>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.FileLruCache$1: void onClose()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: void access$100(com.facebook.internal.FileLruCache,java.lang.String,java.io.File)>, caller=<com.facebook.internal.FileLruCache$1: void onClose()>, lineNumber=191, columnNumber=-1}}
DataFlow{$r0 := @this: com.facebook.internal.FileLruCache$1----$r0---->$r1 = $r0.<com.facebook.internal.FileLruCache$1: java.lang.String val$key>}
DataFlow{$r1 = $r0.<com.facebook.internal.FileLruCache$1: java.lang.String val$key>----$r1---->staticinvoke <com.facebook.internal.FileLruCache: void access$100(com.facebook.internal.FileLruCache,java.lang.String,java.io.File)>($r2, $r1, $r4)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.entities.CommonInfo getCommonInfo()> for Value: r1}
DataFlow{$r0 := @this: com.biznessapps.food_ordering.FoodOrderingManager----$r0---->r1 = $r0.<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.entities.CommonInfo commonInfo>}
DataFlow{r1 = $r0.<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.entities.CommonInfo commonInfo>----r1---->return r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.food_ordering.locations.LocationDetailActivity: void onCreate(android.os.Bundle)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.food_ordering.locations.LocationDetailActivity: void loadBgUrl()>, caller=<com.biznessapps.food_ordering.locations.LocationDetailActivity: void onCreate(android.os.Bundle)>, lineNumber=84, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.food_ordering.locations.LocationDetailActivity----$r0---->specialinvoke $r0.<com.biznessapps.food_ordering.locations.LocationDetailActivity: void loadBgUrl()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, lineNumber=323, columnNumber=-1}}
DataFlow{$r4 := @parameter4: byte[]----$r4---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r5, $r3, $r4)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=922, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, lineNumber=323, columnNumber=-1}}
DataFlow{$r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2)----$r5---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r5, $r3, $r4)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, lineNumber=323, columnNumber=-1}}
DataFlow{$r3 := @parameter3: byte[]----$r3---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>($r5, $r3, $r4)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=922, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.NativeProtocol$MessengerAppInfo: java.lang.String getPackage()> for Value: "com.facebook.orca"}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.food_ordering.entities.CommonInfo: java.lang.String getBackground()> for Value: r1}
DataFlow{r1 = $r0.<com.biznessapps.food_ordering.entities.CommonInfo: java.lang.String background>----r1---->return r1}
DataFlow{$r0 := @this: com.biznessapps.food_ordering.entities.CommonInfo----$r0---->r1 = $r0.<com.biznessapps.food_ordering.entities.CommonInfo: java.lang.String background>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$700()> for Value: $r0}
DataFlow{$r0 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeNTLM2RandomChallenge()>()----$r0---->return $r0}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams: int getImageType()> for Value: i0}
DataFlow{i0 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams: int imageType>----i0---->return i0}
DataFlow{$r0 := @this: com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams----$r0---->i0 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams: int imageType>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[],int,int)> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: void update(byte[],int,int)>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[],int,int)>, lineNumber=1290, columnNumber=-1}}
DataFlow{$i0 := @parameter1: int----$i0---->virtualinvoke $r2.<java.security.MessageDigest: void update(byte[],int,int)>($r1, $i0, $i1)}
DataFlow{$r1 := @parameter0: byte[]----$r1---->virtualinvoke $r2.<java.security.MessageDigest: void update(byte[],int,int)>($r1, $i0, $i1)}
DataFlow{$r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r0---->$r2 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: java.security.MessageDigest md5>}
DataFlow{$i1 := @parameter2: int----$i1---->virtualinvoke $r2.<java.security.MessageDigest: void update(byte[],int,int)>($r1, $i0, $i1)}
DataFlow{$r2 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: java.security.MessageDigest md5>----$r2---->virtualinvoke $r2.<java.security.MessageDigest: void update(byte[],int,int)>($r1, $i0, $i1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)> for Value: null}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)> for Value: $r1}
DataFlow{$r4 = <java.util.Locale: java.util.Locale ENGLISH>----$r4---->$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4)}
DataFlow{$r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)----$r5---->$r1 = (java.lang.String) $r5}
DataFlow{$r3 = $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>----$r3---->$r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)}
DataFlow{$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4)----$r1---->$r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4)}
DataFlow{$r0 := @this: org.apache.http.impl.auth.RFC2617Scheme----$r0---->$r3 = $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>}
DataFlow{$r1 = (java.lang.String) $r5----$r1---->return $r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>, caller=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>, lineNumber=302, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.security.cert.X509Certificate----$r0---->$r5 = virtualinvoke $r0.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>()}
----------CallerLinks----------------
Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, lineNumber=148, columnNumber=-1}}
Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>, lineNumber=342, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker: java.lang.String access$300(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)> for Value: $r0}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <com.biznessapps.utils.google.caching.ImageWorker: java.lang.String getCacheKey(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)>($r0, $r1)}
DataFlow{$r0 = staticinvoke <com.biznessapps.utils.google.caching.ImageWorker: java.lang.String getCacheKey(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)>($r0, $r1)----$r0---->return $r0}
DataFlow{$r1 := @parameter1: com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams----$r1---->$r0 = staticinvoke <com.biznessapps.utils.google.caching.ImageWorker: java.lang.String getCacheKey(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)>($r0, $r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>, caller=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=363, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask----$r0---->$r2 = virtualinvoke $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>($r1)}
DataFlow{$r1 := @parameter0: java.lang.Object[]----$r1---->$r2 = virtualinvoke $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>($r1)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.utils.google.caching.AsyncTask$2: java.lang.Object call()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.Object doInBackground(java.lang.Object[])>, caller=<com.biznessapps.utils.google.caching.AsyncTask$2: java.lang.Object call()>, lineNumber=312, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String,com.facebook.Session)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String,com.facebook.Session)>, lineNumber=357, columnNumber=-1}}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->specialinvoke $r3.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, $r2)}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->specialinvoke $r3.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, $r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMResponse(java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMResponse(java.lang.String,byte[])>, lineNumber=255, columnNumber=-1}}
DataFlow{$r1 := @parameter1: byte[]----$r1---->$r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>($r2, $r1)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMResponse(java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=937, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, lineNumber=72, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
----------CallerLinks----------------
Slice{Method:<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, caller=<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)>, lineNumber=206, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, lineNumber=72, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
DataFlow{$r2 = $r0.<twitter4j.auth.OAuthAuthorization: twitter4j.auth.OAuthToken oauthToken>----$r2---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, lineNumber=72, columnNumber=-1}}
DataFlow{$r6 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] getParameters()>()----$r6---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
DataFlow{$r4 = virtualinvoke $r3.<twitter4j.internal.http.RequestMethod: java.lang.String name()>()----$r4---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
DataFlow{$r5 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: java.lang.String getURL()>()----$r5---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
DataFlow{$r2 = $r0.<twitter4j.auth.OAuthAuthorization: twitter4j.auth.OAuthToken oauthToken>----$r2---->$r4 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>($r4, $r5, $r6, $r2)}
DataFlow{$r3 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.RequestMethod getMethod()>()----$r3---->$r4 = virtualinvoke $r3.<twitter4j.internal.http.RequestMethod: java.lang.String name()>()}
DataFlow{$r1 := @parameter0: twitter4j.internal.http.HttpRequest----$r1---->$r6 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] getParameters()>()}
----------CallerLinks----------------
Slice{Method:<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, caller=<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)>, lineNumber=206, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, caller=<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)>, lineNumber=206, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, caller=<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)>, lineNumber=206, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: void update(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>, lineNumber=1285, columnNumber=-1}}
DataFlow{$r1 := @parameter0: byte[]----$r1---->virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r1)}
DataFlow{$r2 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: java.security.MessageDigest md5>----$r2---->virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r1)}
DataFlow{$r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r0---->$r2 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: java.security.MessageDigest md5>}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, lineNumber=504, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, lineNumber=505, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>, caller=<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=272, columnNumber=-1}}
DataFlow{$r13 = newarray (java.lang.Object)[2]----$r13---->$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r13)}
DataFlow{$r2 := @parameter1: java.lang.String----$r2---->$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r13)}
DataFlow{$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r13)----$r2---->$r2 = staticinvoke <com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>($r2)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, caller=<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment()>, lineNumber=210, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageCache: java.lang.String hashKeyForDisk(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageCache: java.lang.String hashKeyForDisk(java.lang.String)>, lineNumber=417, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()> for CallSite: MethodCallSiteInfo{callee=<java.security.SecureRandom: void nextBytes(byte[])>, caller=<org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()>, lineNumber=438, columnNumber=-1}}
DataFlow{$r0 = new java.security.SecureRandom----$r0---->specialinvoke $r0.<java.security.SecureRandom: void <init>()>()}
DataFlow{specialinvoke $r0.<java.security.SecureRandom: void <init>()>()----$r0---->virtualinvoke $r0.<java.security.SecureRandom: void nextBytes(byte[])>($r1)}
DataFlow{$r1 = newarray (byte)[8]----$r1---->virtualinvoke $r0.<java.security.SecureRandom: void nextBytes(byte[])>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.NativeProtocol$KatanaAppInfo: java.lang.String getPackage()> for Value: "com.facebook.katana"}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.devicecollector.CollectorProcess: java.lang.Void doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.devicecollector.collectors.LocalCollector: void collectDeviceId()>, caller=<com.devicecollector.CollectorProcess: java.lang.Void doInBackground(java.lang.String[])>, lineNumber=122, columnNumber=-1}}
DataFlow{$r5 = new com.devicecollector.collectors.LocalCollector----$r5---->virtualinvoke $r5.<com.devicecollector.collectors.LocalCollector: void collectDeviceId()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, caller=<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment()>, lineNumber=210, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] getParameters()> for Value: r1}
DataFlow{r1 = $r0.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] parameters>----r1---->return r1}
DataFlow{$r0 := @this: twitter4j.internal.http.HttpRequest----$r0---->r1 = $r0.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] parameters>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, caller=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=571, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask----$r0---->$r1 = virtualinvoke $r0.<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>($r3)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.auth.OAuthToken: javax.crypto.spec.SecretKeySpec getSecretKeySpec()> for Value: r1}
DataFlow{r1 = $r0.<twitter4j.auth.OAuthToken: javax.crypto.spec.SecretKeySpec secretKeySpec>----r1---->return r1}
DataFlow{$r0 := @this: twitter4j.auth.OAuthToken----$r0---->r1 = $r0.<twitter4j.auth.OAuthToken: javax.crypto.spec.SecretKeySpec secretKeySpec>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>, lineNumber=1239, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, lineNumber=35, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r4 = staticinvoke <com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)>($r1, $r2, $i0, $i0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, lineNumber=-1, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, lineNumber=37, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r3 = staticinvoke <com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>($r1)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.Object,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.Object,int,int)>, lineNumber=81, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$MD4: byte[] getOutput()> for Value: $r1}
DataFlow{$r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$MD4----$r0---->$i0 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: int D>}
DataFlow{$i0 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: int B>----$i0---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 4)}
DataFlow{staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 0)----$r1---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 4)}
DataFlow{staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 4)----$r1---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 8)}
DataFlow{$i0 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: int A>----$i0---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 0)}
DataFlow{staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 8)----$r1---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 12)}
DataFlow{$r1 = newarray (byte)[16]----$r1---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 0)}
DataFlow{staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 12)----$r1---->return $r1}
DataFlow{$i0 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: int D>----$i0---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 12)}
DataFlow{$i0 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: int C>----$i0---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void writeULong(byte[],int,int)>($r1, $i0, 8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>, lineNumber=137, columnNumber=-1}}
DataFlow{$r5 = $r4[0]----$r5---->$r6 = (java.security.cert.X509Certificate) $r5}
DataFlow{$r2 := @parameter1: javax.net.ssl.SSLSession----$r2---->$r4 = interfaceinvoke $r2.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>()}
DataFlow{$r6 = (java.security.cert.X509Certificate) $r5----$r6---->virtualinvoke $r0.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)}
DataFlow{$r4 = interfaceinvoke $r2.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>()----$r4---->$r5 = $r4[0]}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()>, lineNumber=438, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.fan_wall.NewFanWallActivity----$r0---->$r1 = $r0.<com.biznessapps.fan_wall.NewFanWallActivity: java.util.List comments>}
DataFlow{$r4 = (com.biznessapps.fan_wall.CommentEntity) $r3----$r4---->$r5 = virtualinvoke $r4.<com.biznessapps.fan_wall.CommentEntity: java.lang.String getImageUrl()>()}
DataFlow{$r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>()----$r3---->$r4 = (com.biznessapps.fan_wall.CommentEntity) $r3}
DataFlow{$r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()----$r2---->$r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>()}
DataFlow{$r5 = virtualinvoke $r4.<com.biznessapps.fan_wall.CommentEntity: java.lang.String getImageUrl()>()----$r5---->virtualinvoke $r7.<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>($r5, $r8)}
DataFlow{$r1 = $r0.<com.biznessapps.fan_wall.NewFanWallActivity: java.util.List comments>----$r1---->$r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity: void access$1100(com.biznessapps.fan_wall.NewFanWallActivity)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()>, caller=<com.biznessapps.fan_wall.NewFanWallActivity: void access$1100(com.biznessapps.fan_wall.NewFanWallActivity)>, lineNumber=53, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()>, lineNumber=438, columnNumber=-1}}
DataFlow{$r1 = $r0.<com.biznessapps.fan_wall.NewFanWallActivity: java.util.List comments>----$r1---->$r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()}
DataFlow{$r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()----$r2---->$r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>()}
DataFlow{$r5 = virtualinvoke $r4.<com.biznessapps.fan_wall.CommentEntity: java.lang.String getImageUrl()>()----$r5---->$r8 = staticinvoke <com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>($r5)}
DataFlow{$r4 = (com.biznessapps.fan_wall.CommentEntity) $r3----$r4---->$r5 = virtualinvoke $r4.<com.biznessapps.fan_wall.CommentEntity: java.lang.String getImageUrl()>()}
DataFlow{$r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>()----$r3---->$r4 = (com.biznessapps.fan_wall.CommentEntity) $r3}
DataFlow{$r0 := @this: com.biznessapps.fan_wall.NewFanWallActivity----$r0---->$r1 = $r0.<com.biznessapps.fan_wall.NewFanWallActivity: java.util.List comments>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmHash(java.lang.String)> for Value: $r3}
DataFlow{$r2 = r6----$r2---->$r3 = virtualinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: byte[] getOutput()>()}
DataFlow{$r3 = virtualinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: byte[] getOutput()>()----$r3---->return $r3}
DataFlow{r6 = new org.apache.http.impl.auth.NTLMEngineImpl$MD4----r6---->$r2 = r6}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>, lineNumber=41, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r5 = virtualinvoke $r4.<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>($r0)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>, caller=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, lineNumber=47, columnNumber=-1}}
Slice{Method:<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>, caller=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String,android.graphics.BitmapFactory$Options,int,int)>, lineNumber=101, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity: void access$1100(com.biznessapps.fan_wall.NewFanWallActivity)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()>, caller=<com.biznessapps.fan_wall.NewFanWallActivity: void access$1100(com.biznessapps.fan_wall.NewFanWallActivity)>, lineNumber=53, columnNumber=-1}}
DataFlow{$r0 := @parameter0: com.biznessapps.fan_wall.NewFanWallActivity----$r0---->specialinvoke $r0.<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()>()}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity: void access$1100(com.biznessapps.fan_wall.NewFanWallActivity)>, caller=<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()>, lineNumber=370, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,com.facebook.Session)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,com.facebook.Session)>, lineNumber=341, columnNumber=-1}}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->specialinvoke $r2.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, null, $r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent validateActivityIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent validateActivityIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, lineNumber=315, columnNumber=-1}}
DataFlow{$r2 := @parameter1: android.content.Intent----$r2---->$r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>($r2, 0)}
DataFlow{$r3 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>()----$r3---->$r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>($r2, 0)}
DataFlow{$r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>----$r5---->$r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>}
DataFlow{$r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>($r2, 0)----$r4---->$r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->$z0 = virtualinvoke $r1.<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>($r0, $r6)}
DataFlow{$r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>----$r6---->$z0 = virtualinvoke $r1.<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>($r0, $r6)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent createProxyAuthIntent(android.content.Context,java.lang.String,java.util.List,java.lang.String,boolean,com.facebook.SessionDefaultAudience)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent validateActivityIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent createProxyAuthIntent(android.content.Context,java.lang.String,java.util.List,java.lang.String,boolean,com.facebook.SessionDefaultAudience)>, lineNumber=-1, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.images.BitmapDownloader: void saveBitmap(android.graphics.Bitmap,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.images.BitmapDownloader: void saveBitmap(android.graphics.Bitmap,java.lang.String)>, lineNumber=33, columnNumber=-1}}
DataFlow{$r2 := @parameter1: java.lang.String----$r2---->virtualinvoke $r6.<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>($r2, $r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()>, caller=<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])>, lineNumber=109, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()>, caller=<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])>, lineNumber=104, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()> for Value: r1}
DataFlow{r1 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] targetInfo>----r1---->return r1}
DataFlow{$r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl$Type2Message----$r0---->r1 = $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] targetInfo>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.internal.http.HttpRequest: java.lang.String getURL()> for Value: r1}
DataFlow{$r0 := @this: twitter4j.internal.http.HttpRequest----$r0---->r1 = $r0.<twitter4j.internal.http.HttpRequest: java.lang.String url>}
DataFlow{r1 = $r0.<twitter4j.internal.http.HttpRequest: java.lang.String url>----r1---->return r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.Settings: java.lang.String getApplicationId()> for Value: r0}
DataFlow{r0 = <com.facebook.Settings: java.lang.String applicationId>----r0---->return r0}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.ImageDownloader: void readFromCache(com.facebook.internal.ImageDownloader$RequestKey,android.content.Context,boolean)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.UrlRedirectCache: java.net.URI getRedirectedUri(android.content.Context,java.net.URI)>, caller=<com.facebook.internal.ImageDownloader: void readFromCache(com.facebook.internal.ImageDownloader$RequestKey,android.content.Context,boolean)>, lineNumber=180, columnNumber=-1}}
DataFlow{$r3 = $r0.<com.facebook.internal.ImageDownloader$RequestKey: java.net.URI uri>----$r3---->$r3 = staticinvoke <com.facebook.internal.UrlRedirectCache: java.net.URI getRedirectedUri(android.content.Context,java.net.URI)>($r1, $r3)}
DataFlow{$r0 := @parameter0: com.facebook.internal.ImageDownloader$RequestKey----$r0---->$r3 = $r0.<com.facebook.internal.ImageDownloader$RequestKey: java.net.URI uri>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, lineNumber=459, columnNumber=-1}}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r4---->$r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r2 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>()----$r2---->$r3 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "android_id")}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->$r2 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>()}
DataFlow{specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()----$r4---->$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)}
DataFlow{$r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()----$r1---->$r1 = staticinvoke <com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>($r1)}
DataFlow{$r4 = new java.lang.StringBuilder----$r4---->specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r3 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "android_id")----$r3---->$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)}
DataFlow{$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)----$r4---->$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
----------CallerLinks----------------
Slice{Method:<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, caller=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, lineNumber=606, columnNumber=-1}}
Slice{Method:<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, caller=<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>, lineNumber=362, columnNumber=-1}}
Slice{Method:<com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, caller=<com.facebook.AppLinkData: void fetchDeferredAppLinkFromServer(android.content.Context,java.lang.String,com.facebook.AppLinkData$CompletionHandler)>, lineNumber=133, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMResponse(java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMResponse(java.lang.String,byte[])>, lineNumber=272, columnNumber=-1}}
DataFlow{$r1 := @parameter1: byte[]----$r1---->$r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>($r2, $r1)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMResponse(java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=936, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMResponse(java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=-1, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)>, caller=<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree)>, lineNumber=79, columnNumber=-1}}
DataFlow{$r0 := @this: com.braintreepayments.api.dropin.view.PaymentButton----$r0---->virtualinvoke $r0.<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)>($r1, $r2, 11876)}
DataFlow{$r2 := @parameter1: com.braintreepayments.api.Braintree----$r2---->virtualinvoke $r0.<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)>($r1, $r2, 11876)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=1308, columnNumber=-1}}
DataFlow{$r6 = new org.apache.http.impl.auth.NTLMEngineImpl$Type2Message----$r6---->$r8 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>()}
DataFlow{$r8 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>()----$r8---->$r1 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r1, $r2, $r4, $r3, $r7, $i0, $r5, $r8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=1308, columnNumber=-1}}
DataFlow{$r7 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>()----$r7---->$r1 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r1, $r2, $r4, $r3, $r7, $i0, $r5, $r8)}
DataFlow{$r6 = new org.apache.http.impl.auth.NTLMEngineImpl$Type2Message----$r6---->$r7 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>, lineNumber=386, columnNumber=-1}}
DataFlow{$r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString> = $r3----$r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString>---->$r3 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString>}
DataFlow{$r9 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams imageParams>----$r9---->$i0 = virtualinvoke $r9.<com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams: int getImageType()>()}
DataFlow{$r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)----$r8---->$r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)}
DataFlow{specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()----$r8---->$r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)}
DataFlow{$i0 = virtualinvoke $r9.<com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams: int getImageType()>()----$i0---->$r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)}
DataFlow{$r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()----$r3---->$r4 = virtualinvoke $r6.<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>($r3)}
DataFlow{$r1 := @parameter0: java.lang.Object[]----$r1---->$r2 = $r1[0]}
DataFlow{$r3 = (java.lang.String) $r2----$r3---->$r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString> = $r3}
DataFlow{$r0 := @this: com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask----$r0---->$r9 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams imageParams>}
DataFlow{$r3 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString>----$r3---->$r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)}
DataFlow{$r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)----$r8---->$r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r2 = $r1[0]----$r2---->$r3 = (java.lang.String) $r2}
DataFlow{$r8 = new java.lang.StringBuilder----$r8---->specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>, lineNumber=410, columnNumber=-1}}
DataFlow{$r9 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams imageParams>----$r9---->$r3 = staticinvoke <com.biznessapps.utils.google.caching.ImageWorker: java.lang.String access$300(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)>($r3, $r9)}
DataFlow{$r0 := @this: com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask----$r0---->$r9 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams imageParams>}
DataFlow{$r2 = $r1[0]----$r2---->$r3 = (java.lang.String) $r2}
DataFlow{$r3 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString>----$r3---->$r3 = staticinvoke <com.biznessapps.utils.google.caching.ImageWorker: java.lang.String access$300(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)>($r3, $r9)}
DataFlow{$r1 := @parameter0: java.lang.Object[]----$r1---->$r2 = $r1[0]}
DataFlow{$r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString> = $r3----$r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString>---->$r3 = $r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString>}
DataFlow{$r3 = (java.lang.String) $r2----$r3---->$r0.<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.String dataString> = $r3}
DataFlow{$r3 = staticinvoke <com.biznessapps.utils.google.caching.ImageWorker: java.lang.String access$300(java.lang.String,com.biznessapps.utils.google.caching.ImageWorker$ImageLoadParams)>($r3, $r9)----$r3---->virtualinvoke $r6.<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>($r3, $r4)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>, caller=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=363, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=-1, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=205, columnNumber=-1}}
DataFlow{$r1 := @parameter0: org.apache.http.auth.Credentials----$r1---->$r8 = specialinvoke $r0.<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=205, columnNumber=-1}}
DataFlow{$r0 := @this: org.apache.http.impl.auth.DigestScheme----$r0---->$r8 = specialinvoke $r0.<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=-1, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.internal.http.HttpParameter: java.lang.String getValue()> for Value: r1}
DataFlow{$r0 := @this: twitter4j.internal.http.HttpParameter----$r0---->r1 = $r0.<twitter4j.internal.http.HttpParameter: java.lang.String value>}
DataFlow{r1 = $r0.<twitter4j.internal.http.HttpParameter: java.lang.String value>----r1---->return r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String encodeParameters(java.util.List)> for Value: $r1}
DataFlow{$r0 := @parameter0: java.util.List----$r0---->$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>($r0, "&", 0)}
DataFlow{$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String encodeParameters(java.util.List,java.lang.String,boolean)>($r0, "&", 0)----$r1---->return $r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.NativeProtocol$WakizashiAppInfo: java.lang.String getPackage()> for Value: "com.facebook.wakizashi"}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, lineNumber=151, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, lineNumber=151, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>("MD5", $r0)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.FileLruCache: void renameToTargetAndTrim(java.lang.String,java.io.File)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, caller=<com.facebook.internal.FileLruCache: void renameToTargetAndTrim(java.lang.String,java.io.File)>, lineNumber=240, columnNumber=-1}}
Slice{Method:<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, caller=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>, lineNumber=119, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)> for Value: $r0}
DataFlow{$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>("MD5", $r0)----$r0---->return $r0}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>("MD5", $r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.common.social.ui.SocialCommentComponent: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.common.social.ui.SocialCommentComponent: void postComment(android.app.Activity,com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.biznessapps.api.AsyncCallback)>, caller=<com.biznessapps.common.social.ui.SocialCommentComponent: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String)>, lineNumber=198, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, lineNumber=280, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
DataFlow{$r2 := @parameter1: java.lang.String----$r2---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
DataFlow{$r4 := @parameter3: twitter4j.auth.OAuthToken----$r4---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
DataFlow{$r3 := @parameter2: twitter4j.internal.http.HttpParameter[]----$r3---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
----------CallerLinks----------------
Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, lineNumber=72, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, lineNumber=280, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
----------CallerLinks----------------
Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, lineNumber=72, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, lineNumber=280, columnNumber=-1}}
DataFlow{$r4 := @parameter3: twitter4j.auth.OAuthToken----$r4---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r2, $r3, $r6, $r7, $r4)}
----------CallerLinks----------------
Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>, lineNumber=72, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>, caller=<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>, lineNumber=397, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String hashBytes(java.security.MessageDigest,byte[])> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: byte[] digest()>, caller=<com.facebook.internal.Utility: java.lang.String hashBytes(java.security.MessageDigest,byte[])>, lineNumber=178, columnNumber=-1}}
DataFlow{virtualinvoke $r0.<java.security.MessageDigest: void update(byte[])>($r1)----$r0---->$r1 = virtualinvoke $r0.<java.security.MessageDigest: byte[] digest()>()}
DataFlow{$r0 := @parameter0: java.security.MessageDigest----$r0---->virtualinvoke $r0.<java.security.MessageDigest: void update(byte[])>($r1)}
DataFlow{$r1 := @parameter1: byte[]----$r1---->virtualinvoke $r0.<java.security.MessageDigest: void update(byte[])>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.Session: android.content.Context getStaticContext()> for Value: r0}
DataFlow{r0 = <com.facebook.Session: android.content.Context staticContext>----r0---->return r0}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.AppSwitch: boolean isAvailable()> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.AppSwitch: boolean isSignatureValid()>, caller=<com.braintreepayments.api.AppSwitch: boolean isAvailable()>, lineNumber=42, columnNumber=-1}}
DataFlow{$r0 := @this: com.braintreepayments.api.AppSwitch----$r0---->$z0 = specialinvoke $r0.<com.braintreepayments.api.AppSwitch: boolean isSignatureValid()>()}
----------CallerLinks----------------
Slice{Method:<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.AppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()>, lineNumber=31, columnNumber=-1}}
Slice{Method:<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.AppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)>, lineNumber=99, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, lineNumber=503, columnNumber=-1}}
DataFlow{$r3 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r3---->specialinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, lineNumber=503, columnNumber=-1}}
DataFlow{$r3 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r3---->specialinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r0)}
DataFlow{$r0 := @parameter0: byte[]----$r0---->specialinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r0)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, lineNumber=323, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, lineNumber=300, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, lineNumber=506, columnNumber=-1}}
DataFlow{$r3 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r3---->$r1 = virtualinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, lineNumber=505, columnNumber=-1}}
DataFlow{$r2 := @parameter2: byte[]----$r2---->virtualinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r2)}
DataFlow{$r3 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r3---->virtualinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r2)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, lineNumber=323, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, lineNumber=300, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, lineNumber=504, columnNumber=-1}}
DataFlow{$r3 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5----$r3---->virtualinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r1)}
DataFlow{$r1 := @parameter1: byte[]----$r1---->virtualinvoke $r3.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r1)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, lineNumber=300, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, lineNumber=323, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.Response: java.util.List fromHttpConnection(java.net.HttpURLConnection,com.facebook.RequestBatch)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>, caller=<com.facebook.Response: java.util.List fromHttpConnection(java.net.HttpURLConnection,com.facebook.RequestBatch)>, lineNumber=297, columnNumber=-1}}
DataFlow{$r8 = virtualinvoke $r6.<com.facebook.internal.CacheableRequestBatch: java.lang.String getCacheKeyOverride()>()----$r8---->$r5 = $r8}
DataFlow{$r9 = virtualinvoke $r1.<com.facebook.RequestBatch: com.facebook.Request get(int)>(0)----$r9---->$r5 = virtualinvoke $r9.<com.facebook.Request: java.lang.String getUrlForSingleRequest()>()}
DataFlow{$r6 = (com.facebook.internal.CacheableRequestBatch) $r1----$r6---->$r8 = virtualinvoke $r6.<com.facebook.internal.CacheableRequestBatch: java.lang.String getCacheKeyOverride()>()}
DataFlow{$r1 := @parameter1: com.facebook.RequestBatch----$r1---->$r9 = virtualinvoke $r1.<com.facebook.RequestBatch: com.facebook.Request get(int)>(0)}
DataFlow{$r5 = virtualinvoke $r9.<com.facebook.Request: java.lang.String getUrlForSingleRequest()>()----$r5---->$r10 = virtualinvoke $r7.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>($r5)}
DataFlow{$r5 = $r8----$r5---->$r10 = virtualinvoke $r7.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>($r5)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.braintreepayments.api.internal.BraintreeGatewayCertificate: java.io.InputStream getCertInputStream()> for Value: $r2}
DataFlow{$r3 = "-----BEGIN CERTIFICATE-----\nMIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ\nBgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh\nc3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy\nMTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp\nemVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X\nDTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw\nFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg\nUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo\nYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5\nMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB\nAQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4\npO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0\n13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID\nAQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk\nU01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i\nF6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY\noJ2daZH9\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw\nCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl\ncmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu\nLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT\naWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD\nVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT\naWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ\nbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu\nIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg\nLSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b\nN3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t\nKmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu\nkxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm\nCC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ\nXwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu\nimi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te\n2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe\nDGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC\n/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p\nF4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt\nTxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL\nMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\nZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln\nbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp\nU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y\naXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG\nA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp\nU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg\nSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln\nbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5\nIC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm\nGUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve\nfLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw\nAwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ\naW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj\naHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW\nkf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC\n4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga\nFRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB\nyjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\nExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\nU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\nZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\naG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL\nMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\nZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln\nbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp\nU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y\naXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1\nnmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex\nt0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz\nSdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG\nBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+\nrCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/\nNIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E\nBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH\nBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy\naXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv\nMzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE\np6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y\n5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK\nWE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ\n4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N\nhnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICPDCCAaUCEDyRMcsf9tAbDpq40ES/Er4wDQYJKoZIhvcNAQEFBQAwXzELMAkG\nA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz\ncyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2\nMDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV\nBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt\nYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN\nADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE\nBarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is\nI19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G\nCSqGSIb3DQEBBQUAA4GBABByUqkFFBkyCEHwxWsKzH4PIRnN5GfcX6kb5sroc50i\n2JhucwNhkcV8sEVAbkSdjbCxlnRhLQ2pRdKkkirWmnWXbj9T/UWZYB2oK0z5XqcJ\n2HUw19JlYD1n1khVdWk/kfVIC0dpImmClr7JyDiGSnoscxlIaU5rfGW/D/xwzoiQ\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDuDCCAqCgAwIBAgIQDPCOXAgWpa1Cf/DrJxhZ0DANBgkqhkiG9w0BAQUFADBI\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTA2MTEwNzE5MzExOFoXDTI5MTIz\nMTE5NDA1NVowSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENv\ncnBvcmF0aW9uMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTCCASIwDQYJKoZIhvcN\nAQEBBQADggEPADCCAQoCggEBAKukgeWVzfX2FI7CT8rU4niVWJxB4Q2ZQCQXOZEz\nZum+4YOvYlyJ0fwkW2Gz4BERQRwdbvC4u/jep4G6pkjGnx29vo6pQT64lO0pGtSO\n0gMdA+9tDWccV9cGrcrI9f4Or2YlSASWC12juhbDCE/RRvgUXPLIXgGZbf2IzIao\nwW8xQmxSPmjL8xk037uHGFaAJsTQ3MBv396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj\n7DaUaHp3pLHnDi+BeuK1cobvomuL8A/b01k/unK8RCSc43Oz969XL0Imnal0ugBS\n8kvNU3xHCzaFDmapCJcWNFfBZveA4+1wVMeT4C4oFVmHursCAwEAAaOBnTCBmjAT\nBgkrBgEEAYI3FAIEBh4EAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB\n/zAdBgNVHQ4EFgQUQjK2FvoE/f5dS3rD/fdMQB1aQ68wNAYDVR0fBC0wKzApoCeg\nJYYjaHR0cDovL2NybC5zZWN1cmV0cnVzdC5jb20vU1RDQS5jcmwwEAYJKwYBBAGC\nNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBADDtT0rhWDpSclu1pqNlGKa7UTt3\n6Z3q059c4EVlew3KW+JwULKUBRSuSceNQQcSc5R+DCMh/bwQf2AQWnL1mA6s7Ll/\n3XpvXdMc9P+IBWlCqQVxyLesJugutIxq/3HcuLHfmbx8IVQr5Fiiu1cprp6poxkm\nD5kuCLDv/WnPmRoJjeOnnyvJNjR7JLN4TJUXpAYmHrZkUjZfYGfZnMUFdAvnZyPS\nCPyI6a6Lf+Ew9Dd+/cYy2i2eRDAwbO4H3tI0/NL/QPZL9GZGBlSm8jIKYyYwa5vR\n3ItHuuG51WLQoqD0ZwV4KWMabwTW+MZMo5qxN7SN5ShLHZ4swrhovO0C7jE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDxTCCAq2gAwIBAgIBADANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCVVMx\nEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoT\nEUdvRGFkZHkuY29tLCBJbmMuMTEwLwYDVQQDEyhHbyBEYWRkeSBSb290IENlcnRp\nZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5MDkwMTAwMDAwMFoXDTM3MTIzMTIz\nNTk1OVowgYMxCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6b25hMRMwEQYDVQQH\nEwpTY290dHNkYWxlMRowGAYDVQQKExFHb0RhZGR5LmNvbSwgSW5jLjExMC8GA1UE\nAxMoR28gRGFkZHkgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL9xYgjx+lk09xvJGKP3gElY6SKD\nE6bFIEMBO4Tx5oVJnyfq9oQbTqC023CYxzIBsQU+B07u9PpPL1kwIuerGVZr4oAH\n/PMWdYA5UXvl+TW2dE6pjYIT5LY/qQOD+qK+ihVqf94Lw7YZFAXK6sOoBJQ7Rnwy\nDfMAZiLIjWltNowRGLfTshxgtDj6AozO091GB94KPutdfMh8+7ArU6SSYmlRJQVh\nGkSBjCypQ5Yj36w6gZoOKcUcqeldHraenjAKOc7xiID7S13MMuyFYkMlNAJWJwGR\ntDtwKj9useiciAF9n9T521NtYJ2/LOdYq7hfRvzOxBsDPAnrSTFcaUaz4EcCAwEA\nAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYE\nFDqahQcQZyi27/a9BUFuIMGU2g/eMA0GCSqGSIb3DQEBCwUAA4IBAQCZ21151fmX\nWWcDYfF+OwYxdS2hII5PZYe096acvNjpL9DbWu7PdIxztDhC2gV7+AJ1uP2lsdeu\n9tfeE8tTEH6KRtGX+rcuKxGrkLAngPnon1rpN5+r5N9ss4UXnT3ZJE95kTXWXwTr\ngIOrmgIttRD02JDHBHNA7XIloKmf7J6raBKZV8aPEjoJpL1E/QYVN8Gb5DKj7Tjo\n2GTzLH4U/ALqn83/B2gX2yKQOC16jdFU8WnjXzPKej17CuPKf1855eJ1usV2GDPO\nLPAvTK33sefOT6jEm0pUBsV/fdUID+Ic/n4XuKxe9tQWskMJDE32p2u0mYRlynqI\n4uJEvlz36hz1\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW\nMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy\nc2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD\nVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1\nc3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC\nAQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81\nWzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG\nFF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq\nXbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL\nse4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb\nKNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd\nIgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73\ny/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt\nhAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc\nQIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4\nLt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV\nHSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ\nKoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z\ndXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ\nL1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr\nFg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo\nag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY\nT1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz\nGDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m\n1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV\nOCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH\n6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX\nQMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW\nMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy\nc2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE\nBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0\nIFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV\nVaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8\ncQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT\nQjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh\nF7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v\nc7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w\nmZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd\nVHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX\nteGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ\nf9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe\nBi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+\nnhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY\nMBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG\n9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc\naanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX\nIwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn\nANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z\nuzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN\nPnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja\nQI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW\nkoRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9\nER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt\nDF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm\nbJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW\nMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs\nIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG\nEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg\nR2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A\nPRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8\nY2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL\nTytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL\n5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7\nS4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe\n2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE\nFHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap\nEBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td\nEPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv\n/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN\nA0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0\nabby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF\nI8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz\n4iIprn2DQKi6bA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDVDCCAjygAwIBAgIDAjRWMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT\nMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i\nYWwgQ0EwHhcNMDIwNTIxMDQwMDAwWhcNMjIwNTIxMDQwMDAwWjBCMQswCQYDVQQG\nEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSR2VvVHJ1c3Qg\nR2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2swYYzD9\n9BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9mOSm9BXiLnTjoBbdq\nfnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIuT8rxh0PBFpVXLVDv\niS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6cJmTM386DGXHKTubU\n1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmRCw7+OC7RHQWa9k0+\nbw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5aszPeE4uwc2hGKceeoW\nMPRfwCvocWvk+QIDAQABo1MwUTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTA\nephojYn7qwVkDBF9qn1luMrMTjAfBgNVHSMEGDAWgBTAephojYn7qwVkDBF9qn1l\nuMrMTjANBgkqhkiG9w0BAQUFAAOCAQEANeMpauUvXVSOKVCUn5kaFOSPeCpilKIn\nZ57QzxpeR+nBsqTP3UEaBU6bS+5Kb1VSsyShNwrrZHYqLizz/Tt1kL/6cdjHPTfS\ntQWVYrmm3ok9Nns4d0iXrKYgjy6myQzCsplFAMfOEVEiIuCl6rYVSAlk6l5PdPcF\nPseKUgzbFbS9bZvlxrFUaKnjaZC2mqUPuLk/IH2uSrW4nOQdtqvmlKXBx4Ot2/Un\nhw4EbNX/3aBd7YdStysVAq45pmp06drE57xNNB6pXE0zX5IJL4hmXXeXxx12E6nV\n5fEWCRE11azbJHFwLJhWC9kXtNHjUStedejV0NxPNO3CBWaAocvmMw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDuDCCAqCgAwIBAgIQDPCOXAgWpa1Cf/DrJxhZ0DANBgkqhkiG9w0BAQUFADBI\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTA2MTEwNzE5MzExOFoXDTI5MTIz\nMTE5NDA1NVowSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENv\ncnBvcmF0aW9uMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTCCASIwDQYJKoZIhvcN\nAQEBBQADggEPADCCAQoCggEBAKukgeWVzfX2FI7CT8rU4niVWJxB4Q2ZQCQXOZEz\nZum+4YOvYlyJ0fwkW2Gz4BERQRwdbvC4u/jep4G6pkjGnx29vo6pQT64lO0pGtSO\n0gMdA+9tDWccV9cGrcrI9f4Or2YlSASWC12juhbDCE/RRvgUXPLIXgGZbf2IzIao\nwW8xQmxSPmjL8xk037uHGFaAJsTQ3MBv396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj\n7DaUaHp3pLHnDi+BeuK1cobvomuL8A/b01k/unK8RCSc43Oz969XL0Imnal0ugBS\n8kvNU3xHCzaFDmapCJcWNFfBZveA4+1wVMeT4C4oFVmHursCAwEAAaOBnTCBmjAT\nBgkrBgEEAYI3FAIEBh4EAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB\n/zAdBgNVHQ4EFgQUQjK2FvoE/f5dS3rD/fdMQB1aQ68wNAYDVR0fBC0wKzApoCeg\nJYYjaHR0cDovL2NybC5zZWN1cmV0cnVzdC5jb20vU1RDQS5jcmwwEAYJKwYBBAGC\nNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBADDtT0rhWDpSclu1pqNlGKa7UTt3\n6Z3q059c4EVlew3KW+JwULKUBRSuSceNQQcSc5R+DCMh/bwQf2AQWnL1mA6s7Ll/\n3XpvXdMc9P+IBWlCqQVxyLesJugutIxq/3HcuLHfmbx8IVQr5Fiiu1cprp6poxkm\nD5kuCLDv/WnPmRoJjeOnnyvJNjR7JLN4TJUXpAYmHrZkUjZfYGfZnMUFdAvnZyPS\nCPyI6a6Lf+Ew9Dd+/cYy2i2eRDAwbO4H3tI0/NL/QPZL9GZGBlSm8jIKYyYwa5vR\n3ItHuuG51WLQoqD0ZwV4KWMabwTW+MZMo5qxN7SN5ShLHZ4swrhovO0C7jE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICiDCCAg2gAwIBAgIQNfwmXNmET8k9Jj1Xm67XVjAKBggqhkjOPQQDAzCBhDEL\nMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjE4MDYGA1UECxMvKGMp\nIDIwMDcgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAi\nBgNVBAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMjAeFw0wNzExMDUwMDAw\nMDBaFw0zODAxMTgyMzU5NTlaMIGEMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhh\nd3RlLCBJbmMuMTgwNgYDVQQLEy8oYykgMjAwNyB0aGF3dGUsIEluYy4gLSBGb3Ig\nYXV0aG9yaXplZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9v\ndCBDQSAtIEcyMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEotWcgnuVnfFSeIf+iha/\nBebfowJPDQfGAFG6DAJSLSKkQjnE/o/qycG+1E3/n3qe4rF8mq2nhglzh9HnmuN6\npapu+7qzcMBniKI11KOasf2twu8x+qi58/sIxpHR+ymVo0IwQDAPBgNVHRMBAf8E\nBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUmtgAMADna3+FGO6Lts6K\nDPgR4bswCgYIKoZIzj0EAwMDaQAwZgIxAN344FdHW6fmCsO99YCKlzUNG4k8VIZ3\nKMqh9HneteY4sPBlcIx/AlTCv//YoT7ZzwIxAMSNlPzcU9LcnXgWHxUzI1NS41ox\nXZ3Krr0TKUQNJ1uo52icEvdYPy5yAlejj6EULg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEIDCCAwigAwIBAgIQNE7VVyDV7exJ9C/ON9srbTANBgkqhkiG9w0BAQUFADCB\nqTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf\nQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw\nMDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxHzAdBgNV\nBAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwHhcNMDYxMTE3MDAwMDAwWhcNMzYw\nNzE2MjM1OTU5WjCBqTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5j\nLjEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYG\nA1UECxMvKGMpIDIwMDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNl\nIG9ubHkxHzAdBgNVBAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsoPD7gFnUnMekz52hWXMJEEUMDSxuaPFs\nW0hoSVk3/AszGcJ3f8wQLZU0HObrTQmnHNK4yZc2AreJ1CRfBsDMRJSUjQJib+ta\n3RGNKJpchJAQeg29dGYvajig4tVUROsdB58Hum/u6f1OCyn1PoSgAfGcq/gcfomk\n6KHYcWUNo1F77rzSImANuVud37r8UVsLr5iy6S7pBOhih94ryNdOwUxkHt3Ph1i6\nSk/KaAcdHJ1KxtUvkcx8cXIcxcBn6zL9yZJclNqFwJu/U30rCfSMnZEfl2pSy94J\nNqR32HuHUETVPm4pafs5SSYeCaWAe0At6+gnhcn+Yf1+5nyXHdWdAgMBAAGjQjBA\nMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBR7W0XP\nr87Lev0xkhpqtvNG61dIUDANBgkqhkiG9w0BAQUFAAOCAQEAeRHAS7ORtvzw6WfU\nDW5FvlXok9LOAz/t2iWwHVfLHjp2oEzsUHboZHIMpKnxuIvW1oeEuzLlQRHAd9mz\nYJ3rG9XRbkREqaYB7FViHXe4XI5ISXycO1cRrK1zN44veFyQaEfZYGDm/Ac9IiAX\nxPcW6cTYcvnIc3zfFi8VqT79aie2oetaupgf1eNNZAqdE8hhuvU5HIe6uL17In/2\n/qxAeeWsEG89jxt5dovEN7MhGITlNgDrYyCZuen+MwS7QcjBAvlEYyCegc5C09Y/\nLHbTY5xZ3Y+m4Q6gLkH3LpVHz7z9M/P2C2F+fpErgUfCJzDupxBdN49cOSvkBPB7\njVaMaA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICiDCCAg2gAwIBAgIQNfwmXNmET8k9Jj1Xm67XVjAKBggqhkjOPQQDAzCBhDEL\nMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjE4MDYGA1UECxMvKGMp\nIDIwMDcgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAi\nBgNVBAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMjAeFw0wNzExMDUwMDAw\nMDBaFw0zODAxMTgyMzU5NTlaMIGEMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhh\nd3RlLCBJbmMuMTgwNgYDVQQLEy8oYykgMjAwNyB0aGF3dGUsIEluYy4gLSBGb3Ig\nYXV0aG9yaXplZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9v\ndCBDQSAtIEcyMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEotWcgnuVnfFSeIf+iha/\nBebfowJPDQfGAFG6DAJSLSKkQjnE/o/qycG+1E3/n3qe4rF8mq2nhglzh9HnmuN6\npapu+7qzcMBniKI11KOasf2twu8x+qi58/sIxpHR+ymVo0IwQDAPBgNVHRMBAf8E\nBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUmtgAMADna3+FGO6Lts6K\nDPgR4bswCgYIKoZIzj0EAwMDaQAwZgIxAN344FdHW6fmCsO99YCKlzUNG4k8VIZ3\nKMqh9HneteY4sPBlcIx/AlTCv//YoT7ZzwIxAMSNlPzcU9LcnXgWHxUzI1NS41ox\nXZ3Krr0TKUQNJ1uo52icEvdYPy5yAlejj6EULg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0\nIFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz\nBgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y\naXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG\n9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMTk1NFoXDTE5MDYy\nNjAwMTk1NFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y\nazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs\nYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw\nOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl\ncnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOOnHK5avIWZJV16vY\ndA757tn2VUdZZUcOBVXc65g2PFxTXdMwzzjsvUGJ7SVCCSRrCl6zfN1SLUzm1NZ9\nWlmpZdRJEy0kTRxQb7XBhVQ7/nHk01xC+YDgkRoKWzk2Z/M/VXwbP7RfZHM047QS\nv4dk+NoS/zcnwbNDu+97bi5p9wIDAQABMA0GCSqGSIb3DQEBBQUAA4GBADt/UG9v\nUJSZSWI4OB9L+KXIPqeCgfYrx+jFzug6EILLGACOTb2oWH+heQC1u+mNr0HZDzTu\nIYEZoDJJKPTEjlbVUjP9UNV+mWwD5MlM/Mtsq2azSiGM5bUMMj4QssxsodyamEwC\nW/POuZ6lcg5Ktz885hZo+L7tdEy8W9ViH0Pd\n-----END CERTIFICATE-----\n"----$r3---->$r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8")}
DataFlow{$r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8")----$r1---->specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1)}
DataFlow{$r2 = new java.io.ByteArrayInputStream----$r2---->specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1)}
DataFlow{specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1)----$r2---->return $r2}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.AppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()>, lineNumber=31, columnNumber=-1}}
DataFlow{$r0 := @this: com.braintreepayments.api.VenmoAppSwitch----$r0---->$z0 = specialinvoke $r0.<com.braintreepayments.api.AppSwitch: boolean isAvailable()>()}
----------CallerLinks----------------
Slice{Method:<com.braintreepayments.api.BraintreeApi: boolean isVenmoEnabled()> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.BraintreeApi: boolean isVenmoEnabled()>, lineNumber=172, columnNumber=-1}}
Slice{Method:<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)>, lineNumber=99, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String)>, lineNumber=352, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String)>, lineNumber=352, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, null)}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String)>, lineNumber=352, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)>, lineNumber=99, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.AppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.AppSwitch: void launch(android.app.Activity,int)>, lineNumber=99, columnNumber=-1}}
DataFlow{$r0 := @this: com.braintreepayments.api.AppSwitch----$r0---->$z0 = virtualinvoke $r0.<com.braintreepayments.api.AppSwitch: boolean isAvailable()>()}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, lineNumber=281, columnNumber=-1}}
DataFlow{$r13 = virtualinvoke $r0.<org.apache.http.impl.auth.DigestScheme: java.lang.String getParameter(java.lang.String)>("algorithm")----$r13---->$r14 = $r13}
DataFlow{$r13 = $r14----$r13---->$r19 = staticinvoke <org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>($r13)}
DataFlow{$r0 := @this: org.apache.http.impl.auth.DigestScheme----$r0---->$r13 = virtualinvoke $r0.<org.apache.http.impl.auth.DigestScheme: java.lang.String getParameter(java.lang.String)>("algorithm")}
DataFlow{$r14 = "MD5"----$r14---->$r13 = $r14}
DataFlow{$r13 = "MD5"----$r13---->$r19 = staticinvoke <org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>($r13)}
DataFlow{$r14 = $r13----$r14---->$r13 = $r14}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, lineNumber=-1, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)> for CallSite: MethodCallSiteInfo{callee=<java.security.Principal: java.lang.String getName()>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, lineNumber=286, columnNumber=-1}}
DataFlow{$r1 := @parameter0: org.apache.http.auth.Credentials----$r1---->$r20 = interfaceinvoke $r1.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>()}
DataFlow{$r20 = interfaceinvoke $r1.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>()----$r20---->$r13 = interfaceinvoke $r20.<java.security.Principal: java.lang.String getName()>()}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=-1, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=205, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: java.util.HashMap getWifiMacInfo()> for Value: $r1}
DataFlow{$r5 = (android.net.wifi.WifiManager) $r4----$r5---->$r6 = virtualinvoke $r5.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>()}
DataFlow{virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("wifi_mac", $r7)----$r1---->return $r1}
DataFlow{specialinvoke $r1.<java.util.HashMap: void <init>()>()----$r1---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("wifi_mac", $r7)}
DataFlow{$r3 = $r0.<com.devicecollector.collectors.LocalCollector: android.content.Context context>----$r3---->$r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi")}
DataFlow{$r6 = virtualinvoke $r5.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>()----$r6---->$r7 = virtualinvoke $r6.<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>()}
DataFlow{$r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi")----$r4---->$r5 = (android.net.wifi.WifiManager) $r4}
DataFlow{$r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "")----$r7---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("wifi_mac", $r7)}
DataFlow{specialinvoke $r1.<java.util.HashMap: void <init>()>()----$r1---->return $r1}
DataFlow{$r1 = new java.util.HashMap----$r1---->specialinvoke $r1.<java.util.HashMap: void <init>()>()}
DataFlow{$r0 := @this: com.devicecollector.collectors.LocalCollector----$r0---->$r3 = $r0.<com.devicecollector.collectors.LocalCollector: android.content.Context context>}
DataFlow{$r7 = virtualinvoke $r6.<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>()----$r7---->$r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "")}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<org.apache.http.auth.NTCredentials: java.security.Principal getUserPrincipal()> for Value: r1}
DataFlow{r1 = $r0.<org.apache.http.auth.NTCredentials: org.apache.http.auth.NTUserPrincipal principal>----r1---->return r1}
DataFlow{$r0 := @this: org.apache.http.auth.NTCredentials----$r0---->r1 = $r0.<org.apache.http.auth.NTCredentials: org.apache.http.auth.NTUserPrincipal principal>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.Object,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.Object,int,int)>, lineNumber=81, columnNumber=-1}}
DataFlow{$r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1)----$r2---->$r3 = specialinvoke $r0.<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>($r2, $i0, $i1)}
DataFlow{$r1 := @parameter0: java.lang.Object----$r1---->$r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>, caller=<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>, lineNumber=136, columnNumber=-1}}
DataFlow{$r1 := @parameter0: org.apache.http.auth.Credentials----$r1---->$r6 = staticinvoke <org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>($r1, $r5, $z0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>, caller=<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>, lineNumber=159, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>, caller=<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>, lineNumber=159, columnNumber=-1}}
DataFlow{$r0 := @parameter0: byte[]----$r0---->$r1 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>("SHA-1", $r0)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>, caller=<com.facebook.internal.NativeProtocol$NativeAppInfo: boolean validateSignature(android.content.Context,java.lang.String)>, lineNumber=239, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.Request: java.lang.String getUrlForSingleRequest()> for Value: $r1}
DataFlow{$r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/%s", $r4)----$r1---->$r1 = specialinvoke $r0.<com.facebook.Request: java.lang.String appendParametersToBaseUrl(java.lang.String)>($r1)}
DataFlow{$r0 := @this: com.facebook.Request----$r0---->$r1 = specialinvoke $r0.<com.facebook.Request: java.lang.String appendParametersToBaseUrl(java.lang.String)>($r1)}
DataFlow{$r1 = specialinvoke $r0.<com.facebook.Request: java.lang.String appendParametersToBaseUrl(java.lang.String)>($r1)----$r1---->return $r1}
DataFlow{$r4 = newarray (java.lang.Object)[2]----$r4---->$r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/%s", $r4)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>, caller=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, lineNumber=47, columnNumber=-1}}
DataFlow{$r2 := @parameter0: java.lang.String----$r2---->$r3 = staticinvoke <com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap getBitmap(java.lang.String)>($r2)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=581, columnNumber=-1}}
Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()>, lineNumber=438, columnNumber=-1}}
Slice{Method:<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageFetcher: android.graphics.Bitmap processBitmap(java.lang.String,int,int)>, lineNumber=37, columnNumber=-1}}
Slice{Method:<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=152, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker: android.graphics.Bitmap getImageFromCache(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageWorker: android.graphics.Bitmap getImageFromCache(java.lang.String)>, lineNumber=281, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r3 = virtualinvoke $r2.<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>($r1)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppEventsLogger: void activateApp(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: void activateApp(android.content.Context,java.lang.String)>, lineNumber=261, columnNumber=-1}}
DataFlow{staticinvoke <com.facebook.Settings: void publishInstallAsync(android.content.Context,java.lang.String,com.facebook.Request$Callback)>($r0, $r1, null)----$r1---->specialinvoke $r2.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, null)}
DataFlow{staticinvoke <com.facebook.Settings: void publishInstallAsync(android.content.Context,java.lang.String,com.facebook.Request$Callback)>($r0, $r1, null)----$r0---->specialinvoke $r2.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, null)}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->staticinvoke <com.facebook.Settings: void publishInstallAsync(android.content.Context,java.lang.String,com.facebook.Request$Callback)>($r0, $r1, null)}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->staticinvoke <com.facebook.Settings: void publishInstallAsync(android.content.Context,java.lang.String,com.facebook.Request$Callback)>($r0, $r1, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.BraintreeApi: boolean isVenmoEnabled()> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()>, caller=<com.braintreepayments.api.BraintreeApi: boolean isVenmoEnabled()>, lineNumber=172, columnNumber=-1}}
DataFlow{$r0 := @this: com.braintreepayments.api.BraintreeApi----$r0---->$r1 = $r0.<com.braintreepayments.api.BraintreeApi: com.braintreepayments.api.VenmoAppSwitch mVenmoAppSwitch>}
DataFlow{$r1 = $r0.<com.braintreepayments.api.BraintreeApi: com.braintreepayments.api.VenmoAppSwitch mVenmoAppSwitch>----$r1---->$z0 = virtualinvoke $r1.<com.braintreepayments.api.VenmoAppSwitch: boolean isAvailable()>()}
----------CallerLinks----------------
Slice{Method:<com.braintreepayments.api.Braintree: boolean isVenmoEnabled()> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.BraintreeApi: boolean isVenmoEnabled()>, caller=<com.braintreepayments.api.Braintree: boolean isVenmoEnabled()>, lineNumber=321, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>, lineNumber=342, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.security.cert.X509Certificate----$r0---->$r1 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>($r0, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=920, columnNumber=-1}}
DataFlow{$r3 := @parameter4: byte[]----$r3---->$r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>($r4, $r1, $r2, $r3, $r8, $r5)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMResponse(java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=937, columnNumber=-1}}
DataFlow{$r3 := @parameter4: byte[]----$r3---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMResponse(java.lang.String,byte[])>($r2, $r3)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMResponse(java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=-1, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=922, columnNumber=-1}}
DataFlow{$r8 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$600()>()----$r8---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>($r4, $r1, $r2, $r3, $r8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=920, columnNumber=-1}}
DataFlow{$r5 := @parameter7: byte[]----$r5---->$r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>($r4, $r1, $r2, $r3, $r8, $r5)}
DataFlow{$r8 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$600()>()----$r8---->$r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[])>($r4, $r1, $r2, $r3, $r8, $r5)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=154, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=928, columnNumber=-1}}
DataFlow{$r3 := @parameter4: byte[]----$r3---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])>($r2, $r3, $r5)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=154, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=922, columnNumber=-1}}
DataFlow{$r3 := @parameter4: byte[]----$r3---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getLMv2Response(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>($r4, $r1, $r2, $r3, $r8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMResponse(java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=936, columnNumber=-1}}
DataFlow{$r3 := @parameter4: byte[]----$r3---->$r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLMResponse(java.lang.String,byte[])>($r2, $r3)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, lineNumber=928, columnNumber=-1}}
DataFlow{$r3 := @parameter4: byte[]----$r3---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])>($r2, $r3, $r5)}
DataFlow{$r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$700()>()----$r5---->$r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])>($r2, $r3, $r5)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.home_screen.HomeScreenActivity: java.lang.String access$1200(com.biznessapps.home_screen.HomeScreenActivity)> for Value: r1}
DataFlow{$r0 := @parameter0: com.biznessapps.home_screen.HomeScreenActivity----$r0---->r1 = $r0.<com.biznessapps.home_screen.HomeScreenActivity: java.lang.String homeBgUrl>}
DataFlow{r1 = $r0.<com.biznessapps.home_screen.HomeScreenActivity: java.lang.String homeBgUrl>----r1---->return r1}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=152, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask----$r0---->$r2 = $r0.<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.String url>}
DataFlow{$r2 = $r0.<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.String url>----$r2---->$r6 = staticinvoke <com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>($r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=153, columnNumber=-1}}
DataFlow{$r2 = $r0.<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.String url>----$r2---->virtualinvoke $r8.<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>($r2, $r6)}
DataFlow{$r0 := @this: com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask----$r0---->$r2 = $r0.<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.String url>}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, caller=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=130, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.UrlRedirectCache: java.net.URI getRedirectedUri(android.content.Context,java.net.URI)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.UrlRedirectCache: java.net.URI getRedirectedUri(android.content.Context,java.net.URI)>, lineNumber=54, columnNumber=-1}}
DataFlow{$r2 = newarray (char)[128]----$r2---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)----$r3---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{$i0 = virtualinvoke $r5.<java.io.InputStreamReader: int read(char[],int,int)>($r2, 0, $i0)----$i0---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{$r3 = new java.lang.StringBuilder----$r3---->specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()}
DataFlow{specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9)----$r5---->$i0 = virtualinvoke $r5.<java.io.InputStreamReader: int read(char[],int,int)>($r2, 0, $i0)}
DataFlow{$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()----$r4---->$r9 = virtualinvoke $r6.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>($r4, $r8)}
DataFlow{$i0 = virtualinvoke $r5.<java.io.InputStreamReader: int read(char[],int,int)>($r2, 0, $i0)----$i0---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{$r5 = new java.io.InputStreamReader----$r5---->specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9)}
DataFlow{virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)----$r3---->$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)----$r3---->$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r9 = virtualinvoke $r6.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>($r4, $r8)----$r9---->specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9)}
DataFlow{specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()----$r3---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()----$r4---->$r9 = virtualinvoke $r6.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>($r4, $r8)}
DataFlow{$i0 = lengthof $r2----$i0---->$i0 = virtualinvoke $r5.<java.io.InputStreamReader: int read(char[],int,int)>($r2, 0, $i0)}
DataFlow{$i0 = lengthof $r2----$i0---->$i0 = virtualinvoke $r5.<java.io.InputStreamReader: int read(char[],int,int)>($r2, 0, $i0)}
DataFlow{$r2 = newarray (char)[128]----$r2---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{$r3 = new java.lang.StringBuilder----$r3---->specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()}
DataFlow{virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)----$r3---->$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)----$r3---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9)----$r5---->$i0 = virtualinvoke $r5.<java.io.InputStreamReader: int read(char[],int,int)>($r2, 0, $i0)}
DataFlow{$i0 = virtualinvoke $r5.<java.io.InputStreamReader: int read(char[],int,int)>($r2, 0, $i0)----$i0---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{$r1 := @parameter1: java.net.URI----$r1---->$r4 = virtualinvoke $r1.<java.net.URI: java.lang.String toString()>()}
DataFlow{specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()----$r3---->virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0)}
DataFlow{specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()----$r3---->$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r6 = staticinvoke <com.facebook.internal.UrlRedirectCache: com.facebook.internal.FileLruCache getCache(android.content.Context)>($r0)----$r6---->$r9 = virtualinvoke $r6.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>($r4, $r8)}
DataFlow{$r4 = virtualinvoke $r1.<java.net.URI: java.lang.String toString()>()----$r4---->$r9 = virtualinvoke $r6.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>($r4, $r8)}
DataFlow{specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()----$r3---->$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r9 = virtualinvoke $r6.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>($r4, $r8)----$r9---->specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9)}
DataFlow{$r5 = new java.io.InputStreamReader----$r5---->specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.ImageDownloader: void readFromCache(com.facebook.internal.ImageDownloader$RequestKey,android.content.Context,boolean)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.UrlRedirectCache: java.net.URI getRedirectedUri(android.content.Context,java.net.URI)>, caller=<com.facebook.internal.ImageDownloader: void readFromCache(com.facebook.internal.ImageDownloader$RequestKey,android.content.Context,boolean)>, lineNumber=180, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.food_ordering.locations.LocationDetailActivity: void loadBgUrl()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>, caller=<com.biznessapps.food_ordering.locations.LocationDetailActivity: void loadBgUrl()>, lineNumber=131, columnNumber=-1}}
DataFlow{$r4 = virtualinvoke $r3.<com.biznessapps.food_ordering.entities.CommonInfo: java.lang.String getBackground()>()----$r4---->$r0.<com.biznessapps.food_ordering.locations.LocationDetailActivity: java.lang.String bgUrl> = $r4}
DataFlow{$r3 = virtualinvoke $r2.<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.entities.CommonInfo getCommonInfo()>()----$r3---->$r4 = virtualinvoke $r3.<com.biznessapps.food_ordering.entities.CommonInfo: java.lang.String getBackground()>()}
DataFlow{$r2 = staticinvoke <com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.FoodOrderingManager getInstance()>()----$r2---->$r3 = virtualinvoke $r2.<com.biznessapps.food_ordering.FoodOrderingManager: com.biznessapps.food_ordering.entities.CommonInfo getCommonInfo()>()}
DataFlow{$r0 := @this: com.biznessapps.food_ordering.locations.LocationDetailActivity----$r0---->$r4 = $r0.<com.biznessapps.food_ordering.locations.LocationDetailActivity: java.lang.String bgUrl>}
DataFlow{$r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()----$r4---->$r11 = virtualinvoke $r9.<com.biznessapps.utils.google.caching.ImageCache: android.graphics.Bitmap getBitmapFromDiskCache(java.lang.String)>($r4)}
DataFlow{$r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)----$r10---->$r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BLUR")}
DataFlow{$r0.<com.biznessapps.food_ordering.locations.LocationDetailActivity: java.lang.String bgUrl> = $r4----$r0.<com.biznessapps.food_ordering.locations.LocationDetailActivity: java.lang.String bgUrl>---->$r4 = $r0.<com.biznessapps.food_ordering.locations.LocationDetailActivity: java.lang.String bgUrl>}
DataFlow{$r10 = new java.lang.StringBuilder----$r10---->specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BLUR")----$r10---->$r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()----$r10---->$r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)}
DataFlow{$r4 = $r0.<com.biznessapps.food_ordering.locations.LocationDetailActivity: java.lang.String bgUrl>----$r4---->$r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.food_ordering.locations.LocationDetailActivity: void onCreate(android.os.Bundle)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.food_ordering.locations.LocationDetailActivity: void loadBgUrl()>, caller=<com.biznessapps.food_ordering.locations.LocationDetailActivity: void onCreate(android.os.Bundle)>, lineNumber=84, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.Braintree: boolean isVenmoEnabled()>, caller=<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)>, lineNumber=98, columnNumber=-1}}
DataFlow{$r0.<com.braintreepayments.api.dropin.view.PaymentButton: com.braintreepayments.api.Braintree mBraintree> = $r2----$r0.<com.braintreepayments.api.dropin.view.PaymentButton: com.braintreepayments.api.Braintree mBraintree>---->$r2 = $r0.<com.braintreepayments.api.dropin.view.PaymentButton: com.braintreepayments.api.Braintree mBraintree>}
DataFlow{staticinvoke <com.braintreepayments.api.dropin.view.PaymentButton: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>($r3, $i0, $r0)----$r0---->$r2 = $r0.<com.braintreepayments.api.dropin.view.PaymentButton: com.braintreepayments.api.Braintree mBraintree>}
DataFlow{$r0 := @this: com.braintreepayments.api.dropin.view.PaymentButton----$r0---->staticinvoke <com.braintreepayments.api.dropin.view.PaymentButton: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>($r3, $i0, $r0)}
DataFlow{$i0 = <com.braintreepayments.api.dropin.R$layout: int bt_payment_button>----$i0---->staticinvoke <com.braintreepayments.api.dropin.view.PaymentButton: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>($r3, $i0, $r0)}
DataFlow{$r3 = virtualinvoke $r0.<com.braintreepayments.api.dropin.view.PaymentButton: android.content.Context getContext()>()----$r3---->staticinvoke <com.braintreepayments.api.dropin.view.PaymentButton: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>($r3, $i0, $r0)}
DataFlow{$r2 := @parameter1: com.braintreepayments.api.Braintree----$r2---->$r0.<com.braintreepayments.api.dropin.view.PaymentButton: com.braintreepayments.api.Braintree mBraintree> = $r2}
DataFlow{$r2 = $r0.<com.braintreepayments.api.dropin.view.PaymentButton: com.braintreepayments.api.Braintree mBraintree>----$r2---->$z1 = virtualinvoke $r2.<com.braintreepayments.api.Braintree: boolean isVenmoEnabled()>()}
----------CallerLinks----------------
Slice{Method:<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree)> for CallSite: MethodCallSiteInfo{callee=<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree,int)>, caller=<com.braintreepayments.api.dropin.view.PaymentButton: void initialize(android.app.Activity,com.braintreepayments.api.Braintree)>, lineNumber=79, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)> for Value: $r0}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8")}
DataFlow{$r1 = new java.lang.StringBuilder----$r1---->specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()----$r0---->return $r0}
DataFlow{specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$i0 = $i0 + 1----$i0---->$c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$i0 = virtualinvoke $r2.<java.lang.String: int length()>()----$i0---->specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{$c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0)----$c2---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{$c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0)----$c2---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r2 = null----$r2---->$c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0)}
DataFlow{$i0 = $i0 + 1----$i0---->$i0 = $i0 + 1}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{$i0 = $i0 + 2----$i0---->$i0 = $i0 + 1}
DataFlow{$r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8")----$r0---->$r2 = $r0}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$i0 = 0----$i0---->$i0 = $i0 + 2}
DataFlow{$i0 = $i0 + 1----$i0---->$i0 = $i0 + 2}
DataFlow{specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{$i0 = $i0 + 2----$i0---->$i0 = $i0 + 1}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{$i0 = 0----$i0---->$i0 = $i0 + 1}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(126)}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%20")----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0)----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0)----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")----$r1---->virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%2A")}
DataFlow{virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)----$r1---->$r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r2 = $r0----$r2---->$c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment(java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>, caller=<com.biznessapps.fan_wall.FanAddCommentsFragment: void postComment(java.lang.String,java.lang.String,java.lang.String)>, lineNumber=238, columnNumber=-1}}
DataFlow{$r8 = newarray (java.lang.Object)[1]----$r8---->$r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("fan713%s", $r8)}
DataFlow{$r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("fan713%s", $r8)----$r4---->$r9 = staticinvoke <com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>($r4)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, lineNumber=147, columnNumber=-1}}
DataFlow{$r2 := @parameter1: java.security.cert.X509Certificate----$r2---->$r3 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>($r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, lineNumber=148, columnNumber=-1}}
DataFlow{$r2 := @parameter1: java.security.cert.X509Certificate----$r2---->$r4 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>($r2, $r1)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>, lineNumber=137, columnNumber=-1}}
Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>, lineNumber=130, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>, caller=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, lineNumber=163, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>($r0, $r2)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>, lineNumber=155, columnNumber=-1}}
Slice{Method:<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, lineNumber=151, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>, caller=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, lineNumber=163, columnNumber=-1}}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->$r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>()}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>($r0, $r2)}
DataFlow{$r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>()----$r2---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>($r0, $r2)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>, lineNumber=155, columnNumber=-1}}
Slice{Method:<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, lineNumber=151, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,java.lang.String)> for Value: $r0}
DataFlow{$r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>()----$r2---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>($r0, $r2)}
DataFlow{$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>($r0, $r2)----$r0---->return $r0}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->$r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>()}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = staticinvoke <com.facebook.internal.Utility: java.lang.String hashWithAlgorithm(java.lang.String,byte[])>($r0, $r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeRandomChallenge()> for CallSite: MethodCallSiteInfo{callee=<java.security.SecureRandom: void nextBytes(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeRandomChallenge()>, lineNumber=222, columnNumber=-1}}
DataFlow{$r3 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>----$r3---->virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>($r0)}
DataFlow{$r0 = newarray (byte)[8]----$r0---->virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>($r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: void <clinit>()> for CallSite: MethodCallSiteInfo{callee=<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: void <clinit>()>, lineNumber=63, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>, caller=<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>, lineNumber=362, columnNumber=-1}}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->$r13 = staticinvoke <com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>($r0, $r1)}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->$r13 = staticinvoke <com.facebook.internal.Utility: java.lang.String getHashedDeviceAndAppID(android.content.Context,java.lang.String)>($r0, $r1)}
----------CallerLinks----------------
Slice{Method:<com.facebook.Settings$2: void run()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>, caller=<com.facebook.Settings$2: void run()>, lineNumber=300, columnNumber=-1}}
Slice{Method:<com.facebook.Session$AutoPublishAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> for CallSite: MethodCallSiteInfo{callee=<com.facebook.Settings: com.facebook.Response publishInstallAndWaitForResponse(android.content.Context,java.lang.String,boolean)>, caller=<com.facebook.Session$AutoPublishAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>, lineNumber=1863, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.devicecollector.collectors.LocalCollector: java.util.HashMap getProxyPeircingInfo()> for Value: $r1}
DataFlow{virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)----$r1---->return $r1}
DataFlow{virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)----$r2---->$r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>()}
DataFlow{$r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02X", $r9)----$r7---->virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)}
DataFlow{$r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02X", $r9)----$r7---->virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)}
DataFlow{$r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02X", $r9)----$r7---->virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)}
DataFlow{$r7 = virtualinvoke $r5.<java.net.NetworkInterface: java.lang.String getName()>()----$r7---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)}
DataFlow{$r2 = new java.lang.StringBuffer----$r2---->specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()}
DataFlow{virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)----$r1---->return $r1}
DataFlow{$r9 = newarray (java.lang.Object)[1]----$r9---->$r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02X", $r9)}
DataFlow{$r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>()----$r4---->$r5 = (java.net.NetworkInterface) $r4}
DataFlow{$r5 = (java.net.NetworkInterface) $r4----$r5---->$r7 = virtualinvoke $r5.<java.net.NetworkInterface: java.lang.String getName()>()}
DataFlow{$r2 = new java.lang.StringBuffer----$r2---->specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()}
DataFlow{specialinvoke $r1.<java.util.HashMap: void <init>()>()----$r1---->return $r1}
DataFlow{specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()----$r2---->$r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>()}
DataFlow{$r7 = virtualinvoke $r5.<java.net.NetworkInterface: java.lang.String getName()>()----$r7---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)}
DataFlow{$r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>()----$r4---->$r5 = (java.net.NetworkInterface) $r4}
DataFlow{virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)----$r1---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)}
DataFlow{specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()----$r2---->virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)}
DataFlow{$r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>()----$r11---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)}
DataFlow{virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)----$r2---->$r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>()}
DataFlow{$r9 = newarray (java.lang.Object)[1]----$r9---->$r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02X", $r9)}
DataFlow{specialinvoke $r1.<java.util.HashMap: void <init>()>()----$r1---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)}
DataFlow{virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)----$r2---->$r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>()}
DataFlow{$r3 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>()----$r3---->$r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>()}
DataFlow{$r1 = new java.util.HashMap----$r1---->specialinvoke $r1.<java.util.HashMap: void <init>()>()}
DataFlow{$r5 = (java.net.NetworkInterface) $r4----$r5---->$r7 = virtualinvoke $r5.<java.net.NetworkInterface: java.lang.String getName()>()}
DataFlow{specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()----$r2---->virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)}
DataFlow{virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)----$r2---->virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)}
DataFlow{specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()----$r2---->$r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>()}
DataFlow{virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)----$r2---->virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)}
DataFlow{$r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>()----$r11---->virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11)}
DataFlow{$r9 = newarray (java.lang.Object)[1]----$r9---->$r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02X", $r9)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>, caller=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=581, columnNumber=-1}}
DataFlow{$r3 = staticinvoke <com.biznessapps.home_screen.HomeScreenActivity: java.lang.String access$1200(com.biznessapps.home_screen.HomeScreenActivity)>($r2)----$r3---->$r7 = staticinvoke <com.biznessapps.images.BitmapDownloader: android.graphics.Bitmap downloadBitmap(java.lang.String)>($r3)}
DataFlow{$r0 := @this: com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask----$r0---->$r2 = $r0.<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: com.biznessapps.home_screen.HomeScreenActivity this$0>}
DataFlow{$r2 = $r0.<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: com.biznessapps.home_screen.HomeScreenActivity this$0>----$r2---->$r3 = staticinvoke <com.biznessapps.home_screen.HomeScreenActivity: java.lang.String access$1200(com.biznessapps.home_screen.HomeScreenActivity)>($r2)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=582, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask----$r0---->$r2 = $r0.<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: com.biznessapps.home_screen.HomeScreenActivity this$0>}
DataFlow{$r3 = staticinvoke <com.biznessapps.home_screen.HomeScreenActivity: java.lang.String access$1200(com.biznessapps.home_screen.HomeScreenActivity)>($r2)----$r3---->virtualinvoke $r9.<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>($r3, $r7)}
DataFlow{$r2 = $r0.<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: com.biznessapps.home_screen.HomeScreenActivity this$0>----$r2---->$r3 = staticinvoke <com.biznessapps.home_screen.HomeScreenActivity: java.lang.String access$1200(com.biznessapps.home_screen.HomeScreenActivity)>($r2)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, caller=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=571, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.biznessapps.common.entities.CommonEntity: java.lang.String getImageUrl()> for Value: r1}
DataFlow{r1 = $r0.<com.biznessapps.common.entities.CommonEntity: java.lang.String imageUrl>----r1---->return r1}
DataFlow{$r0 := @this: com.biznessapps.common.entities.CommonEntity----$r0---->r1 = $r0.<com.biznessapps.common.entities.CommonEntity: java.lang.String imageUrl>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String constructRequestURL(java.lang.String)> for Value: $r0}
DataFlow{specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()----$r3---->$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)}
DataFlow{$i1 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String,int)>(":", 8)----$i1---->$r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1)}
DataFlow{$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)----$r3---->$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0)}
DataFlow{$i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("?")----$i0---->$r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0)}
DataFlow{$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>()----$r1---->$r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1)}
DataFlow{$r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1)----$r2---->$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)}
DataFlow{$r2 = $r1----$r2---->$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)}
DataFlow{$r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()----$r0---->return $r0}
DataFlow{$r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0)----$r0---->$r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0)}
DataFlow{$i1 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String,int)>(":", 8)----$i1---->$r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1)}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0)}
DataFlow{$r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1)----$r2---->$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)}
DataFlow{$r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0)----$r1---->$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>()}
DataFlow{$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>()----$r1---->$r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1)}
DataFlow{$i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String,int)>("/", 8)----$i0---->$r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0)}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0)}
DataFlow{$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0)----$r3---->$r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r3 = new java.lang.StringBuilder----$r3---->specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()}
DataFlow{$r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0)----$r0---->$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeNTLM2RandomChallenge()> for CallSite: MethodCallSiteInfo{callee=<java.security.SecureRandom: void nextBytes(byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeNTLM2RandomChallenge()>, lineNumber=234, columnNumber=-1}}
DataFlow{$r3 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>----$r3---->virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>($r0)}
DataFlow{$r0 = newarray (byte)[24]----$r0---->virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>($r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=110, columnNumber=-1}}
DataFlow{$r6 = new org.apache.http.impl.auth.NTLMEngineImpl$Type2Message----$r6---->$r9 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>()}
DataFlow{$r9 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>()----$r9---->$r1 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r2, $r3, $r4, $r5, $r8, $i0, $r1, $r9)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>, lineNumber=110, columnNumber=-1}}
DataFlow{$r6 = new org.apache.http.impl.auth.NTLMEngineImpl$Type2Message----$r6---->$r8 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>()}
DataFlow{$r8 = virtualinvoke $r6.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>()----$r8---->$r1 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>($r2, $r3, $r4, $r5, $r8, $i0, $r1, $r9)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.common.social.ui.SocialCommentComponent: void postComment(android.app.Activity,com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.biznessapps.api.AsyncCallback)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>, caller=<com.biznessapps.common.social.ui.SocialCommentComponent: void postComment(android.app.Activity,com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.biznessapps.api.AsyncCallback)>, lineNumber=217, columnNumber=-1}}
DataFlow{$r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r4, $r14)----$r4---->$r4 = staticinvoke <com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>($r4)}
DataFlow{$r14 = newarray (java.lang.Object)[2]----$r14---->$r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r4, $r14)}
DataFlow{$r4 := @parameter3: java.lang.String----$r4---->$r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r4, $r14)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.common.social.ui.SocialCommentComponent: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.common.social.ui.SocialCommentComponent: void postComment(android.app.Activity,com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.biznessapps.api.AsyncCallback)>, caller=<com.biznessapps.common.social.ui.SocialCommentComponent: void addComment(com.biznessapps.common.social.CommonSocialNetworkHandler,java.lang.String)>, lineNumber=198, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, lineNumber=234, columnNumber=-1}}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r5)}
----------CallerLinks----------------
Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, lineNumber=280, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, lineNumber=234, columnNumber=-1}}
DataFlow{$r9 = new twitter4j.internal.http.HttpParameter----$r9---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r6 = new java.util.ArrayList----$r6---->specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(5)}
DataFlow{interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)----$r6---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String constructRequestURL(java.lang.String)>($r2)----$r1---->$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)}
DataFlow{interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)----$r6---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$i0 = $i0 + $i1----$i0---->specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0)}
DataFlow{specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(5)----$r6---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r9 = new twitter4j.internal.http.HttpParameter----$r9---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r12---->$r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")}
DataFlow{interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)----$r7---->$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String normalizeRequestParameters(java.util.List)>($r7)}
DataFlow{$r7 = new java.util.ArrayList----$r7---->specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0)}
DataFlow{interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r11)----$r7---->$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String normalizeRequestParameters(java.util.List)>($r7)}
DataFlow{$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)----$r1---->virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String normalizeRequestParameters(java.util.List)>($r7)----$r1---->$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)}
DataFlow{interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)----$r6---->interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)}
DataFlow{$r5 := @parameter5: twitter4j.auth.OAuthToken----$r5---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r5)}
DataFlow{interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)----$r7---->interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r11)}
DataFlow{interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)----$r6---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r9 = new twitter4j.internal.http.HttpParameter----$r9---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")----$r12---->$r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{$r9 = new twitter4j.internal.http.HttpParameter----$r9---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r8 = newarray (twitter4j.internal.http.HttpParameter)[0]----$r8---->$r11 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.util.List toParamList(twitter4j.internal.http.HttpParameter[])>($r8)}
DataFlow{$r9 = new twitter4j.internal.http.HttpParameter----$r9---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$i0 = interfaceinvoke $r6.<java.util.List: int size()>()----$i0---->$i0 = $i0 + $i1}
DataFlow{$r9 = <twitter4j.auth.OAuthAuthorization: twitter4j.internal.http.HttpParameter OAUTH_SIGNATURE_METHOD>----$r9---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{$r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()----$r1---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r5)}
DataFlow{virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)----$r12---->$r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()}
DataFlow{$r11 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.util.List toParamList(twitter4j.internal.http.HttpParameter[])>($r8)----$r11---->interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r11)}
DataFlow{$r8 := @parameter2: twitter4j.internal.http.HttpParameter[]----$r8---->$r11 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.util.List toParamList(twitter4j.internal.http.HttpParameter[])>($r8)}
DataFlow{$r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")----$r12---->virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{$r1 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encode(java.lang.String)>($r1)----$r1---->$r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)}
DataFlow{interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)----$r6---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
DataFlow{specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0)----$r7---->interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)}
DataFlow{interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)----$r6---->interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)}
DataFlow{$i1 = lengthof $r8----$i1---->$i0 = $i0 + $i1}
DataFlow{specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1)----$r12---->$r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&")}
DataFlow{$r2 := @parameter1: java.lang.String----$r2---->$r1 = staticinvoke <twitter4j.auth.OAuthAuthorization: java.lang.String constructRequestURL(java.lang.String)>($r2)}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1)}
DataFlow{$r12 = new java.lang.StringBuilder----$r12---->specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1)}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r5)}
DataFlow{interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)----$r6---->interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9)}
----------CallerLinks----------------
Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, lineNumber=280, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, lineNumber=234, columnNumber=-1}}
DataFlow{$r5 := @parameter5: twitter4j.auth.OAuthToken----$r5---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r5)}
DataFlow{$r0 := @this: twitter4j.auth.OAuthAuthorization----$r0---->$r1 = virtualinvoke $r0.<twitter4j.auth.OAuthAuthorization: java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken)>($r1, $r5)}
----------CallerLinks----------------
Slice{Method:<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)> for CallSite: MethodCallSiteInfo{callee=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken)>, caller=<twitter4j.auth.OAuthAuthorization: java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken)>, lineNumber=280, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.FileLruCache: void access$100(com.facebook.internal.FileLruCache,java.lang.String,java.io.File)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: void renameToTargetAndTrim(java.lang.String,java.io.File)>, caller=<com.facebook.internal.FileLruCache: void access$100(com.facebook.internal.FileLruCache,java.lang.String,java.io.File)>, lineNumber=59, columnNumber=-1}}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->specialinvoke $r0.<com.facebook.internal.FileLruCache: void renameToTargetAndTrim(java.lang.String,java.io.File)>($r1, $r2)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.FileLruCache$1: void onClose()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: void access$100(com.facebook.internal.FileLruCache,java.lang.String,java.io.File)>, caller=<com.facebook.internal.FileLruCache$1: void onClose()>, lineNumber=191, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: java.lang.String hashKeyForDisk(java.lang.String)>, caller=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, lineNumber=189, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r1 = staticinvoke <com.biznessapps.utils.google.caching.ImageCache: java.lang.String hashKeyForDisk(java.lang.String)>($r1)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: android.graphics.Bitmap doInBackground(java.lang.Object[])>, lineNumber=410, columnNumber=-1}}
Slice{Method:<com.biznessapps.images.BitmapDownloader: void saveBitmap(android.graphics.Bitmap,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.images.BitmapDownloader: void saveBitmap(android.graphics.Bitmap,java.lang.String)>, lineNumber=33, columnNumber=-1}}
Slice{Method:<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.home_screen.HomeScreenActivity$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=582, columnNumber=-1}}
Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.fan_wall.NewFanWallActivity: void handleInBackground()>, lineNumber=438, columnNumber=-1}}
Slice{Method:<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageCache: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>, caller=<com.biznessapps.home_screen.components.BackgroundComponent$SetHomeBgAsyncTask: android.graphics.Bitmap doInBackground(java.lang.String[])>, lineNumber=153, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.RequestMethod getMethod()> for Value: r1}
DataFlow{r1 = $r0.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.RequestMethod method>----r1---->return r1}
DataFlow{$r0 := @this: twitter4j.internal.http.HttpRequest----$r0---->r1 = $r0.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.RequestMethod method>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>, lineNumber=115, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r2 = virtualinvoke $r0.<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>($r1, null)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.ImageResponseCache: java.io.InputStream getCachedImageStream(java.net.URI,android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>, caller=<com.facebook.internal.ImageResponseCache: java.io.InputStream getCachedImageStream(java.net.URI,android.content.Context)>, lineNumber=51, columnNumber=-1}}
Slice{Method:<com.facebook.Response: java.util.List fromHttpConnection(java.net.HttpURLConnection,com.facebook.RequestBatch)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>, caller=<com.facebook.Response: java.util.List fromHttpConnection(java.net.HttpURLConnection,com.facebook.RequestBatch)>, lineNumber=297, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>, caller=<com.facebook.AppEventsLogger: com.facebook.AppEventsLogger newLogger(android.content.Context,java.lang.String)>, lineNumber=372, columnNumber=-1}}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->specialinvoke $r2.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, null)}
DataFlow{$r1 := @parameter1: java.lang.String----$r1---->specialinvoke $r2.<com.facebook.AppEventsLogger: void <init>(android.content.Context,java.lang.String,com.facebook.Session)>($r0, $r1, null)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.utils.google.caching.AsyncTask$2: java.lang.Object call()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.google.caching.ImageWorker$BitmapWorkerTask: java.lang.Object doInBackground(java.lang.Object[])>, caller=<com.biznessapps.utils.google.caching.AsyncTask$2: java.lang.Object call()>, lineNumber=312, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)> for CallSite: MethodCallSiteInfo{callee=<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>, caller=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>, lineNumber=264, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.security.cert.X509Certificate----$r0---->$r3 = virtualinvoke $r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>()}
----------CallerLinks----------------
Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, lineNumber=147, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>, caller=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>, lineNumber=130, columnNumber=-1}}
DataFlow{$r8 = $r7[0]----$r8---->$r9 = (java.security.cert.X509Certificate) $r8}
DataFlow{$r5 = $r4----$r5---->$r7 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>()}
DataFlow{$r5 = $r4----$r5---->$r7 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>()}
DataFlow{$r4 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>()----$r4---->$r5 = $r4}
DataFlow{$r2 := @parameter1: javax.net.ssl.SSLSocket----$r2---->virtualinvoke $r2.<javax.net.ssl.SSLSocket: void startHandshake()>()}
DataFlow{$r5 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>()----$r5---->$r7 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>()}
DataFlow{virtualinvoke $r2.<javax.net.ssl.SSLSocket: void startHandshake()>()----$r2---->$r5 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>()}
DataFlow{$r9 = (java.security.cert.X509Certificate) $r8----$r9---->virtualinvoke $r0.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r9)}
DataFlow{$r7 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>()----$r7---->$r8 = $r7[0]}
DataFlow{$r4 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>()----$r4---->$r5 = $r4}
----------CallerLinks----------------
Slice{Method:<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>, caller=<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>, lineNumber=397, columnNumber=-1}}
Slice{Method:<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>, caller=<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean)>, lineNumber=453, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.internal.HttpRequest: javax.net.ssl.SSLSocketFactory getSslSocketFactory()> for CallSite: MethodCallSiteInfo{callee=<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>, caller=<com.braintreepayments.api.internal.HttpRequest: javax.net.ssl.SSLSocketFactory getSslSocketFactory()>, lineNumber=249, columnNumber=-1}}
DataFlow{$r1 = interfaceinvoke $r10.<java.security.Principal: java.lang.String getName()>()----$r1---->virtualinvoke $r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r1, $r8)}
DataFlow{$r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>()----$r6---->$r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>()}
DataFlow{virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null)----$r2---->virtualinvoke $r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r1, $r8)}
DataFlow{$r10 = virtualinvoke $r9.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>()----$r10---->$r1 = interfaceinvoke $r10.<java.security.Principal: java.lang.String getName()>()}
DataFlow{$r1 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>()----$r1---->$r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)}
DataFlow{$r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)----$r2---->virtualinvoke $r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null)}
DataFlow{$r10 = virtualinvoke $r9.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>()----$r10---->$r1 = interfaceinvoke $r10.<java.security.Principal: java.lang.String getName()>()}
DataFlow{$r8 = (java.security.cert.Certificate) $r7----$r8---->virtualinvoke $r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r1, $r8)}
DataFlow{$r9 = (java.security.cert.X509Certificate) $r8----$r9---->$r10 = virtualinvoke $r9.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>()}
DataFlow{$r1 = interfaceinvoke $r10.<java.security.Principal: java.lang.String getName()>()----$r1---->virtualinvoke $r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r1, $r8)}
DataFlow{$r9 = (java.security.cert.X509Certificate) $r8----$r9---->$r10 = virtualinvoke $r9.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>()}
DataFlow{$r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>()----$r7---->$r8 = (java.security.cert.Certificate) $r7}
DataFlow{$r8 = (java.security.cert.Certificate) $r7----$r8---->virtualinvoke $r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r1, $r8)}
DataFlow{$r4 = staticinvoke <com.braintreepayments.api.internal.BraintreeGatewayCertificate: java.io.InputStream getCertInputStream()>()----$r4---->$r5 = virtualinvoke $r3.<java.security.cert.CertificateFactory: java.util.Collection generateCertificates(java.io.InputStream)>($r4)}
DataFlow{$r5 = virtualinvoke $r3.<java.security.cert.CertificateFactory: java.util.Collection generateCertificates(java.io.InputStream)>($r4)----$r5---->$r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>()}
DataFlow{$r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509")----$r3---->$r5 = virtualinvoke $r3.<java.security.cert.CertificateFactory: java.util.Collection generateCertificates(java.io.InputStream)>($r4)}
DataFlow{$r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>()----$r7---->$r8 = (java.security.cert.Certificate) $r7}
DataFlow{virtualinvoke $r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r1, $r8)----$r2---->virtualinvoke $r2.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>($r1, $r8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>, lineNumber=392, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity: void access$1100(com.biznessapps.fan_wall.NewFanWallActivity)>, caller=<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()>, lineNumber=370, columnNumber=-1}}
DataFlow{$r1 = $r0.<com.biznessapps.fan_wall.NewFanWallActivity$9: com.biznessapps.fan_wall.NewFanWallActivity this$0>----$r1---->staticinvoke <com.biznessapps.fan_wall.NewFanWallActivity: void access$1100(com.biznessapps.fan_wall.NewFanWallActivity)>($r1)}
DataFlow{$r0 := @this: com.biznessapps.fan_wall.NewFanWallActivity$9----$r0---->$r1 = $r0.<com.biznessapps.fan_wall.NewFanWallActivity$9: com.biznessapps.fan_wall.NewFanWallActivity this$0>}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()>, caller=<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])>, lineNumber=109, columnNumber=-1}}
Slice{Method:<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.fan_wall.NewFanWallActivity$9: void run()>, caller=<com.biznessapps.api.LoadDataTaskExternal: com.biznessapps.common.entities.NetworkResultEntity doInBackground(java.util.Map[])>, lineNumber=104, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Void doInBackground(java.lang.Void[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>, caller=<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Void doInBackground(java.lang.Void[])>, lineNumber=89, columnNumber=-1}}
DataFlow{$r0 := @this: com.biznessapps.events.EventGoingTabUtils$2----$r0---->$r2 = $r0.<com.biznessapps.events.EventGoingTabUtils$2: java.lang.String val$md5rule>}
DataFlow{$r2 = $r0.<com.biznessapps.events.EventGoingTabUtils$2: java.lang.String val$md5rule>----$r2---->$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r10)}
DataFlow{$r10 = newarray (java.lang.Object)[2]----$r10---->$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r10)}
DataFlow{$r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r10)----$r2---->$r11 = staticinvoke <com.biznessapps.utils.CommonUtils: java.lang.String getMD5Hash(java.lang.String)>($r2)}
----------CallerLinks----------------
Slice{Method:<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Object doInBackground(java.lang.Object[])> for CallSite: MethodCallSiteInfo{callee=<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Void doInBackground(java.lang.Void[])>, caller=<com.biznessapps.events.EventGoingTabUtils$2: java.lang.Object doInBackground(java.lang.Object[])>, lineNumber=81, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.Request: java.lang.String appendParametersToBaseUrl(java.lang.String)> for Value: $r1}
DataFlow{$r2 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>($r1)----$r2---->virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)}
DataFlow{$r1 = (java.lang.String) $r6----$r1---->virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)}
DataFlow{$r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>()----$r8---->virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)}
DataFlow{$r8 = staticinvoke <com.facebook.Request: java.lang.String parameterToString(java.lang.Object)>($r7)----$r8---->$r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>()}
DataFlow{$r1 = (java.lang.String) $r6----$r1---->virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)}
DataFlow{$r7 = ""----$r7---->$r8 = staticinvoke <com.facebook.Request: java.lang.String parameterToString(java.lang.Object)>($r7)}
DataFlow{$r6 = virtualinvoke $r3.<android.os.Bundle: java.lang.Object get(java.lang.String)>($r1)----$r6---->$r7 = $r6}
DataFlow{$r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>()----$r6---->$r1 = (java.lang.String) $r6}
DataFlow{$r2 = new android.net.Uri$Builder----$r2---->specialinvoke $r2.<android.net.Uri$Builder: void <init>()>()}
DataFlow{virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)----$r2---->$r1 = virtualinvoke $r2.<android.net.Uri$Builder: java.lang.String toString()>()}
DataFlow{virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)----$r2---->$r1 = virtualinvoke $r2.<android.net.Uri$Builder: java.lang.String toString()>()}
DataFlow{$r4 = virtualinvoke $r3.<android.os.Bundle: java.util.Set keySet()>()----$r4---->$r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()}
DataFlow{specialinvoke $r2.<android.net.Uri$Builder: void <init>()>()----$r2---->$r2 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>($r1)}
DataFlow{$r3 = $r0.<com.facebook.Request: android.os.Bundle parameters>----$r3---->$r4 = virtualinvoke $r3.<android.os.Bundle: java.util.Set keySet()>()}
DataFlow{$r2 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>($r1)----$r2---->$r1 = virtualinvoke $r2.<android.net.Uri$Builder: java.lang.String toString()>()}
DataFlow{$r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()----$r5---->$r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>()}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r2 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>($r1)}
DataFlow{$r6 = virtualinvoke $r3.<android.os.Bundle: java.lang.Object get(java.lang.String)>($r1)----$r6---->$r7 = $r6}
DataFlow{$r0 := @this: com.facebook.Request----$r0---->$r3 = $r0.<com.facebook.Request: android.os.Bundle parameters>}
DataFlow{$r1 = virtualinvoke $r2.<android.net.Uri$Builder: java.lang.String toString()>()----$r1---->return $r1}
DataFlow{$r3 = $r0.<com.facebook.Request: android.os.Bundle parameters>----$r3---->$r6 = virtualinvoke $r3.<android.os.Bundle: java.lang.Object get(java.lang.String)>($r1)}
DataFlow{$r3 = $r0.<com.facebook.Request: android.os.Bundle parameters>----$r3---->$r6 = virtualinvoke $r3.<android.os.Bundle: java.lang.Object get(java.lang.String)>($r1)}
DataFlow{$r7 = $r6----$r7---->$r8 = staticinvoke <com.facebook.Request: java.lang.String parameterToString(java.lang.Object)>($r7)}
DataFlow{$r7 = ""----$r7---->$r8 = staticinvoke <com.facebook.Request: java.lang.String parameterToString(java.lang.Object)>($r7)}
DataFlow{virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)----$r2---->virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)}
DataFlow{$r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>()----$r6---->$r1 = (java.lang.String) $r6}
DataFlow{$r7 = $r6----$r7---->$r8 = staticinvoke <com.facebook.Request: java.lang.String parameterToString(java.lang.Object)>($r7)}
DataFlow{$r8 = staticinvoke <com.facebook.Request: java.lang.String parameterToString(java.lang.Object)>($r7)----$r8---->$r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>()}
DataFlow{$r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>()----$r8---->virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>($r1, $r8)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.braintreepayments.api.AppSwitch: boolean isSignatureValid()> for CallSite: MethodCallSiteInfo{callee=<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>, caller=<com.braintreepayments.api.AppSwitch: boolean isSignatureValid()>, lineNumber=77, columnNumber=-1}}
DataFlow{$i1 = $i1 + 1----$i1---->$r3 = $r4[$i1]}
DataFlow{$i1 = $i1 + 1----$i1---->$i1 = $i1 + 1}
DataFlow{$r5 = $r0.<com.braintreepayments.api.AppSwitch: android.content.Context mContext>----$r5---->$r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>()}
DataFlow{$r0 := @this: com.braintreepayments.api.AppSwitch----$r0---->$r5 = $r0.<com.braintreepayments.api.AppSwitch: android.content.Context mContext>}
DataFlow{$r11 = virtualinvoke $r10.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1)----$r11---->$r12 = (java.security.cert.X509Certificate) $r11}
DataFlow{$r8 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r7, 64)----$r8---->$r4 = $r8.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>}
DataFlow{$r10 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X509")----$r10---->$r11 = virtualinvoke $r10.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1)}
DataFlow{$r9 = virtualinvoke $r3.<android.content.pm.Signature: byte[] toByteArray()>()----$r9---->specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9)}
DataFlow{$r7 = virtualinvoke $r0.<com.braintreepayments.api.AppSwitch: java.lang.String getPackage()>()----$r7---->$r8 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r7, 64)}
DataFlow{specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9)----$r1---->$r11 = virtualinvoke $r10.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1)}
DataFlow{$i1 = 0----$i1---->$i1 = $i1 + 1}
DataFlow{$r12 = (java.security.cert.X509Certificate) $r11----$r12---->$r13 = virtualinvoke $r12.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>()}
DataFlow{$r3 = $r4[$i1]----$r3---->$r9 = virtualinvoke $r3.<android.content.pm.Signature: byte[] toByteArray()>()}
DataFlow{$r4 = $r8.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>----$r4---->$r3 = $r4[$i1]}
DataFlow{$r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>()----$r6---->$r8 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r7, 64)}
DataFlow{$r1 = new java.io.ByteArrayInputStream----$r1---->specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])>, lineNumber=359, columnNumber=-1}}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>, caller=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>, lineNumber=119, columnNumber=-1}}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r7 = staticinvoke <com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>($r1)}
----------CallerLinks----------------
Slice{Method:<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String)>, lineNumber=115, columnNumber=-1}}
Slice{Method:<com.facebook.internal.UrlRedirectCache: java.net.URI getRedirectedUri(android.content.Context,java.net.URI)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)>, caller=<com.facebook.internal.UrlRedirectCache: java.net.URI getRedirectedUri(android.content.Context,java.net.URI)>, lineNumber=54, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)> for Value: null}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.internal.FileLruCache: java.io.InputStream get(java.lang.String,java.lang.String)> for Value: $r8}
DataFlow{specialinvoke $r8.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r5, 8192)----$r8---->return $r8}
DataFlow{$r7 = staticinvoke <com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>($r1)----$r7---->specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r7)}
DataFlow{$r4 = new java.io.File----$r4---->specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r7)}
DataFlow{specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r4)----$r5---->specialinvoke $r8.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r5, 8192)}
DataFlow{specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r7)----$r4---->specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r4)}
DataFlow{$r8 = new java.io.BufferedInputStream----$r8---->specialinvoke $r8.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r5, 8192)}
DataFlow{$r5 = new java.io.FileInputStream----$r5---->specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r4)}
DataFlow{$r6 = $r0.<com.facebook.internal.FileLruCache: java.io.File directory>----$r6---->specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r7)}
DataFlow{$r1 := @parameter0: java.lang.String----$r1---->$r7 = staticinvoke <com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>($r1)}
DataFlow{$r0 := @this: com.facebook.internal.FileLruCache----$r0---->$r6 = $r0.<com.facebook.internal.FileLruCache: java.io.File directory>}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
======================DFG for Slice{Method:<com.facebook.Request: java.lang.String parameterToString(java.lang.Object)> for Value: $r2}
DataFlow{$r1 := @parameter0: java.lang.Object----$r1---->$r2 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.lang.Object)>($r1)}
DataFlow{$r0 = new java.text.SimpleDateFormat----$r0---->specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ssZ", $r3)}
DataFlow{specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ssZ", $r3)----$r0---->$r2 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.lang.Object)>($r1)}
DataFlow{$r3 = <java.util.Locale: java.util.Locale US>----$r3---->specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ssZ", $r3)}
DataFlow{$r2 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.lang.Object)>($r1)----$r2---->return $r2}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)> for CallSite: MethodCallSiteInfo{callee=<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>, caller=<org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>, lineNumber=211, columnNumber=-1}}
DataFlow{$r0 := @parameter0: java.lang.String----$r0---->$r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r0)}
----------CallerLinks----------------
Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, lineNumber=-1, columnNumber=-1}}
Slice{Method:<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)> for CallSite: MethodCallSiteInfo{callee=<org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>, caller=<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>, lineNumber=281, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>, caller=<com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)>, lineNumber=381, columnNumber=-1}}
DataFlow{specialinvoke $r5.<android.content.Intent: void <init>()>()----$r5---->$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r6, "com.facebook.katana.platform.TokenRefreshService")}
DataFlow{$r6 = virtualinvoke $r4.<com.facebook.internal.NativeProtocol$NativeAppInfo: java.lang.String getPackage()>()----$r6---->$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r6, "com.facebook.katana.platform.TokenRefreshService")}
DataFlow{$r5 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r6, "com.facebook.katana.platform.TokenRefreshService")----$r5---->$r5 = staticinvoke <com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>($r0, $r5, $r4)}
DataFlow{$r0 := @parameter0: android.content.Context----$r0---->$r5 = staticinvoke <com.facebook.internal.NativeProtocol: android.content.Intent validateServiceIntent(android.content.Context,android.content.Intent,com.facebook.internal.NativeProtocol$NativeAppInfo)>($r0, $r5, $r4)}
DataFlow{$r5 = new android.content.Intent----$r5---->specialinvoke $r5.<android.content.Intent: void <init>()>()}
----------CallerLinks----------------
Slice{Method:<com.facebook.Session$TokenRefreshRequest: void bind()> for CallSite: MethodCallSiteInfo{callee=<com.facebook.internal.NativeProtocol: android.content.Intent createTokenRefreshIntent(android.content.Context)>, caller=<com.facebook.Session$TokenRefreshRequest: void bind()>, lineNumber=1656, columnNumber=-1}}
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
====================DFG for Slice{Method:<org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)> for CallSite: MethodCallSiteInfo{callee=<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>, caller=<org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>, lineNumber=579, columnNumber=-1}}
DataFlow{$r2 = new javax.crypto.spec.SecretKeySpec----$r2---->specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "DES")}
DataFlow{staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void oddParity(byte[])>($r0)----$r0---->specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "DES")}
DataFlow{$r0 = newarray (byte)[8]----$r0---->staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void oddParity(byte[])>($r0)}
----------CallerLinks----------------
------------------------------------
----------CalleeLinks----------------
------------------------------------
=============================================================
